package frontend.examenes;

import frontend.auxiliares.IIdentificadorCambios;
import backend.resoluciones.RespuestaPreguntaNumerica;
import frontend.auxiliares.LookAndFeelEntropy;
import java.awt.Color;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultFormatter;

/**
 * Clase que representa el panel para responder las preguntas numéricas.
 *
 * @author Denise
 */
public class PanelPreguntaNumerica extends javax.swing.JPanel implements IIdentificadorCambios {

    private RespuestaPreguntaNumerica respuestaNumerica;
    private boolean blnSeModifico;
    private final boolean blnEsCorreccion;

    /**
     * Constructor por defecto de la clase.
     *
     * @param respuestaNumerica respuesta numérica cuya se muestra en el panel.
     * @param blnEsCorreccion true si se está corrigiendo la respuesta (deben
     * estar los campos deshabilitados y cargarse la respuesta), false si el
     * alumno debe responder la respuesta
     */
    public PanelPreguntaNumerica(RespuestaPreguntaNumerica respuestaNumerica, boolean blnEsCorreccion) {
        initComponents();
        this.blnSeModifico = false;
        this.blnEsCorreccion = blnEsCorreccion;
        this.respuestaNumerica = respuestaNumerica;
        mostrarPanel();
        addListeners();
        cargarRespuesta();
        lblRespuestaCorrectaNumero.setVisible(blnEsCorreccion);
        lblRespuestaCorrectaRango.setVisible(blnEsCorreccion);
        if (blnEsCorreccion) {
            colorearCorreccion();
            mostrarRespuestaCorrecta();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlRango = new javax.swing.JPanel();
        lblDesde = new javax.swing.JLabel();
        spnDesde = new javax.swing.JSpinner();
        lblHasta = new javax.swing.JLabel();
        spnHasta = new javax.swing.JSpinner();
        lblRespuestaCorrectaRango = new javax.swing.JLabel();
        pnlNumero = new javax.swing.JPanel();
        spnNumero = new javax.swing.JSpinner();
        lblRespuestaCorrectaNumero = new javax.swing.JLabel();

        lblDesde.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblDesde.setText("Desde:");

        spnDesde.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        spnDesde.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(0.1d)));
        JTextField txtDesdeEditor = ((JSpinner.DefaultEditor) spnDesde.getEditor()).getTextField();
        txtDesdeEditor.setCaretColor(LookAndFeelEntropy.COLOR_CURSOR);
        txtDesdeEditor.setSelectionColor(LookAndFeelEntropy.COLOR_SELECCION_TEXTO);

        lblHasta.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblHasta.setText("Hasta:");

        spnHasta.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        spnHasta.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(0.1d)));
        JTextField txtHastaEditor = ((JSpinner.DefaultEditor) spnHasta.getEditor()).getTextField();
        txtHastaEditor.setCaretColor(LookAndFeelEntropy.COLOR_CURSOR);
        txtHastaEditor.setSelectionColor(LookAndFeelEntropy.COLOR_SELECCION_TEXTO);

        lblRespuestaCorrectaRango.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblRespuestaCorrectaRango.setText("Respuesta correcta");
        lblRespuestaCorrectaRango.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout pnlRangoLayout = new javax.swing.GroupLayout(pnlRango);
        pnlRango.setLayout(pnlRangoLayout);
        pnlRangoLayout.setHorizontalGroup(
            pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRangoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRangoLayout.createSequentialGroup()
                        .addGroup(pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblDesde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spnDesde, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(spnHasta)))
                    .addComponent(lblRespuestaCorrectaRango, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlRangoLayout.setVerticalGroup(
            pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRangoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDesde)
                    .addComponent(spnDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRangoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHasta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRespuestaCorrectaRango, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addContainerGap())
        );

        spnNumero.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        spnNumero.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(0.1d)));
        JTextField tf = ((JSpinner.DefaultEditor) spnNumero.getEditor()).getTextField();
        tf.setCaretColor(LookAndFeelEntropy.COLOR_CURSOR);
        tf.setSelectionColor(LookAndFeelEntropy.COLOR_SELECCION_TEXTO);

        lblRespuestaCorrectaNumero.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblRespuestaCorrectaNumero.setText("Respuesta correcta");
        lblRespuestaCorrectaNumero.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout pnlNumeroLayout = new javax.swing.GroupLayout(pnlNumero);
        pnlNumero.setLayout(pnlNumeroLayout);
        pnlNumeroLayout.setHorizontalGroup(
            pnlNumeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNumeroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNumeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spnNumero, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(lblRespuestaCorrectaNumero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlNumeroLayout.setVerticalGroup(
            pnlNumeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNumeroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spnNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRespuestaCorrectaNumero, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblDesde;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblRespuestaCorrectaNumero;
    private javax.swing.JLabel lblRespuestaCorrectaRango;
    private javax.swing.JPanel pnlNumero;
    private javax.swing.JPanel pnlRango;
    private javax.swing.JSpinner spnDesde;
    private javax.swing.JSpinner spnHasta;
    private javax.swing.JSpinner spnNumero;
    // End of variables declaration//GEN-END:variables

    /**
     * Muestra al usuario el panel correcto.
     */
    private void mostrarPanel() {
        if (respuestaNumerica.getPregunta().esRango()) {
            this.add(pnlRango);
        } else {
            this.add(pnlNumero);
        }
        this.revalidate();
        this.repaint();
    }

    /**
     * Actualiza el objeto respuesta con los cambios del alumno.
     *
     * @return la respuesta actualizada.
     */
    public RespuestaPreguntaNumerica fabricarRespuesta() {
        if (blnEsCorreccion) {
            return respuestaNumerica;
        }

        this.blnSeModifico = true;
        if (respuestaNumerica.getPregunta().esRango()) {
            double dblDesde = Double.parseDouble(spnDesde.getModel().getValue().toString());
            double dblHasta = Double.parseDouble(spnHasta.getModel().getValue().toString());

//            if ((dblDesde < Double.MIN_VALUE || dblDesde > Double.MAX_VALUE)
//                    || (dblHasta < Double.MIN_VALUE || dblHasta > Double.MAX_VALUE)) {
//                Mensajes.mostrarError("El valor ingresado debe estar entre " + Double.MIN_VALUE + " y " + Double.MAX_VALUE + ".");
//            }
            respuestaNumerica.setDblRangoDesde(dblDesde);
            respuestaNumerica.setDblRangoHasta(dblHasta);
        } else {
            double dblNumero = Double.parseDouble(spnNumero.getModel().getValue().toString());

//            if (dblNumero < Double.MIN_VALUE || dblNumero > Double.MAX_VALUE) {
//                Mensajes.mostrarError("El valor ingresado debe estar entre " + Double.MIN_VALUE + " y " + Double.MAX_VALUE + ".");
//            }
            respuestaNumerica.setDblRespuestaNumero(dblNumero);
        }
        return respuestaNumerica;
    }

    /**
     * Agrega los listeners a los spinners para actualizar la respuesta al
     * seleccionar un nuevo valor.
     */
    private void addListeners() {
        JComponent compDesde = spnDesde.getEditor();
        JFormattedTextField txtDesde = (JFormattedTextField) compDesde.getComponent(0);
        if (blnEsCorreccion) {
            txtDesde.setEditable(false);
        }
        DefaultFormatter formatterDesde = (DefaultFormatter) txtDesde.getFormatter();
        formatterDesde.setCommitsOnValidEdit(true);
        spnDesde.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                fabricarRespuesta();
                cargarRespuesta();
            }
        });

        JComponent compHasta = spnHasta.getEditor();
        JFormattedTextField txtHasta = (JFormattedTextField) compHasta.getComponent(0);
        if (blnEsCorreccion) {
            txtHasta.setEditable(false);
        }
        DefaultFormatter formatterHasta = (DefaultFormatter) txtHasta.getFormatter();
        formatterHasta.setCommitsOnValidEdit(true);
        spnHasta.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                fabricarRespuesta();
                cargarRespuesta();
            }
        });

        JComponent compNumero = spnNumero.getEditor();
        JFormattedTextField txtNumero = (JFormattedTextField) compNumero.getComponent(0);
        if (blnEsCorreccion) {
            txtNumero.setEditable(false);
        }
        DefaultFormatter formatterNumero = (DefaultFormatter) txtNumero.getFormatter();
        formatterNumero.setCommitsOnValidEdit(true);
        spnNumero.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                fabricarRespuesta();
                cargarRespuesta();
            }
        });
    }

    public RespuestaPreguntaNumerica getPregunta() {
        return respuestaNumerica;
    }

    public void setPregunta(RespuestaPreguntaNumerica respuestaNumerica) {
        this.respuestaNumerica = respuestaNumerica;
    }

    /**
     * Analiza si la pregunta mostrada en este panel ha sido respondida.
     *
     * @return true si se ha modificado, false de lo contrario.
     */
    @Override
    public boolean seModifico() {
        return blnSeModifico;
    }

    /**
     * Carga una respuesta en el panel.
     */
    private void cargarRespuesta() {
        spnDesde.setValue(respuestaNumerica.getDblRangoDesde());
        spnHasta.setValue(respuestaNumerica.getDblRangoHasta());
        spnNumero.setValue(respuestaNumerica.getDblRespuestaNumero());
    }

    /**
     * Marca con rojo las preguntas contestadas erróneamente.
     */
    private void colorearCorreccion() {
        if (respuestaNumerica.getCalificacion() == 0) {
            ((JFormattedTextField) spnNumero.getEditor().getComponent(0)).setForeground(Color.red);
            ((JFormattedTextField) spnDesde.getEditor().getComponent(0)).setForeground(Color.red);
            ((JFormattedTextField) spnHasta.getEditor().getComponent(0)).setForeground(Color.red);
        }
    }

    /**
     * Informa al usuario cuál era la respuesta correcta.
     */
    private void mostrarRespuestaCorrecta() {
        if (respuestaNumerica.getPregunta().esRango()) {
            lblRespuestaCorrectaRango.setText("<html>Respuesta correcta: <br>"
                    + "Desde: " + respuestaNumerica.getPregunta().getDblRangoDesde() + "<br>"
                    + "Hasta: " + respuestaNumerica.getPregunta().getDblRangoHasta() + "<br>"
                    + "Variación aceptada: ±" + respuestaNumerica.getPregunta().getDblVariacion()
                    + "</html>"
            );
        } else {
            lblRespuestaCorrectaNumero.setText("<html>Respuesta correcta: "
                    + respuestaNumerica.getPregunta().getDblNumero() + "<br>"
                    + "Variación aceptada: ±" + respuestaNumerica.getPregunta().getDblVariacion()
                    + "</html>"
            );
        }
    }

}
