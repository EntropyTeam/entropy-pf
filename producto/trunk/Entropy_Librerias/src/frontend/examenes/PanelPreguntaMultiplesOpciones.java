package frontend.examenes;

import backend.diseños.OpcionMultipleOpcion;
import backend.diseños.PreguntaMultipleOpcion;
import backend.resoluciones.RespuestaOpcionMultipleOpcion;
import backend.resoluciones.RespuestaPreguntaMultipleOpcion;
import frontend.auxiliares.LookAndFeelEntropy;
import frontend.auxiliares.IIdentificadorCambios;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JRadioButton;

/**
 * Clase que representa el panel para responder las preguntas múltiples
 * opciones.
 *
 * @author Denise
 */
public class PanelPreguntaMultiplesOpciones extends javax.swing.JPanel implements IIdentificadorCambios {

    private RespuestaPreguntaMultipleOpcion respuestaMO;
    private OpcionMultipleOpcion[] colAleatorizadas;
    private boolean blnSeRespondio;
    private boolean blnEsCorreccion;
    private ButtonGroup bgr;

    /**
     * Constructor de la clase.
     *
     * @param respuestaMO pregunta múltiple opción a mostrarse en el panel.
     * @param blnEsCorreccion true si se está corrigiendo la respuesta (deben
     * estar los campos deshabilitados y cargarse la respuesta), false si el
     * alumno debe responder la respuesta
     */
    public PanelPreguntaMultiplesOpciones(RespuestaPreguntaMultipleOpcion respuestaMO, boolean blnEsCorreccion) {
        this.respuestaMO = respuestaMO;
        this.blnEsCorreccion = blnEsCorreccion;
        initComponents();
        crearOpciones(respuestaMO.getPregunta());
        cargarRespuesta();
        if (blnEsCorreccion) colorearCorreccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlOpciones = new javax.swing.JPanel();

        pnlOpciones.setLayout(new javax.swing.BoxLayout(pnlOpciones, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlOpciones;
    // End of variables declaration//GEN-END:variables

    /**
     * Carga las opciones en el panel correspondiente.
     *
     * @param pmo la pregunta de opciones múltiples a mostrar.
     */
    private void crearOpciones(PreguntaMultipleOpcion pmo) {

        colAleatorizadas = new OpcionMultipleOpcion[pmo.getColOpciones().size()];

        for (int i = 0; i < pmo.getColOpciones().size(); i++) {
            colAleatorizadas[i] = pmo.getColOpciones().get(i);
        }

        colAleatorizadas = aleatorizarArray(colAleatorizadas);

        if (pmo.esUnicaRespuesta()) {
            bgr = new ButtonGroup();
            for (OpcionMultipleOpcion opcion : colAleatorizadas) {
                JRadioButton rbn = new JRadioButton(opcion.getStrRespuesta());
                rbn.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                rbn.setForeground(LookAndFeelEntropy.COLOR_FUENTE_HABILITADA);
                if (blnEsCorreccion) {
                    rbn.setFocusable(false);
                }
                rbn.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (blnEsCorreccion) {
                            cargarRespuesta();
                        } else {
                            fabricarRespuesta();
                        }
                    }
                });
                pnlOpciones.add(rbn);
                bgr.add(rbn);
            }
        } else {
            for (OpcionMultipleOpcion opcion : colAleatorizadas) {
                JCheckBox chb = new JCheckBox(opcion.getStrRespuesta());
                chb.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                chb.setForeground(LookAndFeelEntropy.COLOR_FUENTE_HABILITADA);
                if (blnEsCorreccion) {
                    chb.setFocusable(false);
                }
                chb.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (blnEsCorreccion) {
                            cargarRespuesta();
                        } else {
                            fabricarRespuesta();
                        }
                    }
                });
                pnlOpciones.add(chb);
            }
        }
    }

    /**
     * Actualiza el objeto respuesta con los cambios del alumno. A pesar de
     * haber sido desordenadas, los ítems de opciones de respuesta mantienen el
     * mismo número de orden que los ítems de la pregunta.
     *
     * @return la respuesta actualizada.
     */
    public RespuestaPreguntaMultipleOpcion fabricarRespuesta() {
        ArrayList<RespuestaOpcionMultipleOpcion> colRespuestasOMO = new ArrayList<>();
        blnSeRespondio = false;
        int intContador = 0;
        for (Component comp : pnlOpciones.getComponents()) {
            String strTexto;
            boolean blnSeleccionada;
            int intOrden;
            if (comp instanceof JRadioButton) {
                JRadioButton rbn = (JRadioButton) comp;
                strTexto = rbn.getText();
                blnSeleccionada = rbn.isSelected();
                intOrden = colAleatorizadas[intContador].getIntOrden();
                colRespuestasOMO.add(new RespuestaOpcionMultipleOpcion(intOrden, strTexto, blnSeleccionada));
                intContador++;
                if (blnSeleccionada) {
                    blnSeRespondio = true;
                }
            } else if (comp instanceof JCheckBox /*Por si las dudas*/) {
                JCheckBox chb = (JCheckBox) comp;
                strTexto = chb.getText();
                blnSeleccionada = chb.isSelected();
                intOrden = colAleatorizadas[intContador].getIntOrden();
                colRespuestasOMO.add(new RespuestaOpcionMultipleOpcion(intOrden, strTexto, blnSeleccionada));
                intContador++;
                if (blnSeleccionada) {
                    blnSeRespondio = true;
                }
            }
        }
        respuestaMO.setColeccionOpciones(colRespuestasOMO);
        return respuestaMO;
    }

    public RespuestaPreguntaMultipleOpcion getPregunta() {
        return respuestaMO;
    }

    public void setPregunta(RespuestaPreguntaMultipleOpcion respuestaMO) {
        this.respuestaMO = respuestaMO;
    }

    /**
     * Desordena el array que contiene las opciones a mostrarse.
     *
     * @param original vector a desordenar.
     * @return vector desordenado.
     */
    private OpcionMultipleOpcion[] aleatorizarArray(OpcionMultipleOpcion[] original) {
        OpcionMultipleOpcion[] aleatorizado = original.clone();
        int i = aleatorizado.length - 1;
        while (i > -1) {
            int j = (int) Math.floor(Math.random() * (i + 1));
            OpcionMultipleOpcion tmp = aleatorizado[i];
            aleatorizado[i] = aleatorizado[j];
            aleatorizado[j] = tmp;
            i--;
        }
        return aleatorizado;
    }

    /**
     * Analiza si la pregunta mostrada en este panel ha sido respondida.
     *
     * @return true si se ha modificado, false de lo contrario.
     */
    @Override
    public boolean seModifico() {
        return blnSeRespondio;
    }

    /**
     * Carga una respuesta en el panel.
     */
    private void cargarRespuesta() {
        if (bgr != null) bgr.clearSelection();
        for (RespuestaOpcionMultipleOpcion opcion : respuestaMO.getColeccionOpciones()) {
            for (Component comp : pnlOpciones.getComponents()) {
                if (comp instanceof JRadioButton) {
                    JRadioButton rbn = (JRadioButton) comp;
                    if (rbn.getText().equals(opcion.getStrRespuesta())) {
                        bgr.setSelected(rbn.getModel(), opcion.isBlnEsMarcada());
                        break;
                    }
                } else if (comp instanceof JCheckBox /*Por si las dudas*/) {
                    JCheckBox chb = (JCheckBox) comp;
                    if (chb.getText().equals(opcion.getStrRespuesta())) {
                        chb.setSelected(opcion.isBlnEsMarcada());
                        break;
                    }
                }
            }
        }
    }
    
    /**
     * Marca con rojo las preguntas contestadas erróneamente.
     */
    private void colorearCorreccion() {
        int intContador = 0;
        for (Component comp : pnlOpciones.getComponents()) {
            boolean blnSeleccionada;
            if (comp instanceof JRadioButton) {
                JRadioButton rbn = (JRadioButton) comp;
                blnSeleccionada = rbn.isSelected();
                if (colAleatorizadas[intContador].isBlnEsVerdadera() != blnSeleccionada){
                    rbn.setForeground(Color.red);
                }
                intContador++;
            } else if (comp instanceof JCheckBox /*Por si las dudas*/) {
                JCheckBox chb = (JCheckBox) comp;
                blnSeleccionada = chb.isSelected();
                if (colAleatorizadas[intContador].isBlnEsVerdadera() != blnSeleccionada){
                    chb.setForeground(Color.red);
                }
                intContador++;
            }
        }
    }
}
