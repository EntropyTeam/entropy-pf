package frontend.auxiliares;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.border.LineBorder;

/**
 * Clase que representa las interfaces de mensajes al usuario.
 *
 * @author Denise
 */
public class DialogMensaje extends javax.swing.JDialog {

    private int intOpcionElegida;
    private String[] colBotones;

    public enum TipoMensaje {

        EXITO, ADVERTENCIA, ERROR, OPCION_YES_CANCEL, OPCION_YES_NO_CANCEL, OPCION_CUSTOM, INFORMACION
    }

    /**
     * Constructor de la clase.
     *
     * @param parent ventana padre.
     * @param modal true si mantiene el foco, false de los contrario.
     * @param tipoMensaje instancia de <code>TipoMensaje</code> que determina la
     * forma de inicialización de componentes.
     * @param titulo título para la ventana, de lo contrario se establece un
     * título por defecto.
     * @param mensaje mensaje a mostrarse al usuario.
     */
    public DialogMensaje(java.awt.Frame parent, boolean modal, TipoMensaje tipoMensaje, String titulo, String mensaje) {
        super(parent, modal);
        initComponents();

        this.getRootPane().registerKeyboardAction(new EscapeAction(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_IN_FOCUSED_WINDOW);

        intOpcionElegida = JOptionPane.CANCEL_OPTION;

        inicializarComponentes(tipoMensaje);

        if (titulo != null && !titulo.isEmpty()) {
            lblTitulo.setText(titulo);
        }

        setContenido(mensaje);

        ComponentMover cm = new ComponentMover(JDialog.class, pnlFondo);

//        ComponentResizer cr = new ComponentResizer();
//        cr.setSnapSize(new Dimension(10, 10));
//        cr.registerComponent(this);
        
        this.pack();
        
        setLocationRelativeTo(parent);
    }

    /*
     * Constructor de la clase.
     *
     * @param parent ventana padre.
     * @param modal true si mantiene el foco, false de los contrario.
     * @param tipoMensaje instancia de <code>TipoMensaje</code> que determina la
     * forma de inicialización de componentes.
     * @param titulo título para la ventana, de lo contrario se establece un
     * título por defecto.
     * @param mensaje mensaje a mostrarse al usuario.
     */
    public DialogMensaje(java.awt.Frame parent, boolean modal, TipoMensaje tipoMensaje, String titulo, String mensaje, String[] colBotones) {
        super(parent, modal);
        initComponents();

        this.colBotones = colBotones;

        this.getRootPane().registerKeyboardAction(new EscapeAction(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_IN_FOCUSED_WINDOW);

        intOpcionElegida = JOptionPane.CANCEL_OPTION;

        inicializarComponentes(tipoMensaje);

        if (titulo != null && !titulo.isEmpty()) {
            lblTitulo.setText(titulo);
        }

        setContenido(mensaje);

        ComponentMover cm = new ComponentMover(JDialog.class, pnlFondo);

//        ComponentResizer cr = new ComponentResizer();
//        cr.setSnapSize(new Dimension(10, 10));
//        cr.registerComponent(this);
        
        this.pack();
        
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        lblIcono = new javax.swing.JLabel();
        sptSeparador = new javax.swing.JSeparator();
        pnlDerecho = new javax.swing.JPanel();
        pnlTexto = new javax.swing.JPanel();
        lblContenido = new javax.swing.JLabel();
        lblTitulo = new javax.swing.JLabel();
        btnCerrar = new javax.swing.JButton();
        pnlBotones = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setModal(true);
        setUndecorated(true);
        setResizable(false);

        pnlFondoAux = new PanelGradiente(Color.ORANGE);
        pnlFondo = pnlFondoAux;

        lblIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_mensajes_advertencia.png"))); // NOI18N

        sptSeparador.setForeground(new java.awt.Color(255, 153, 0));
        sptSeparador.setOrientation(javax.swing.SwingConstants.VERTICAL);

        pnlDerecho.setOpaque(false);
        pnlDerecho.setLayout(new javax.swing.BoxLayout(pnlDerecho, javax.swing.BoxLayout.Y_AXIS));

        pnlTexto.setOpaque(false);

        lblContenido.setForeground(new java.awt.Color(51, 51, 51));
        lblContenido.setText("<html>Esto es el cuerpo</html>");

        lblTitulo.setFont(new java.awt.Font("Calibri", 1, 13)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(204, 153, 0));
        lblTitulo.setText("Error");

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_mensajes_cerrar_advertencia.png"))); // NOI18N
        btnCerrar.setBorder(null);
        btnCerrar.setContentAreaFilled(false);
        btnCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTextoLayout = new javax.swing.GroupLayout(pnlTexto);
        pnlTexto.setLayout(pnlTextoLayout);
        pnlTextoLayout.setHorizontalGroup(
            pnlTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTextoLayout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar))
            .addComponent(lblContenido, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
        );
        pnlTextoLayout.setVerticalGroup(
            pnlTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTextoLayout.createSequentialGroup()
                .addGroup(pnlTextoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCerrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblContenido, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
        );

        pnlDerecho.add(pnlTexto);

        pnlBotones.setOpaque(false);
        pnlBotones.setPreferredSize(new java.awt.Dimension(218, 0));
        pnlBotones.setLayout(new java.awt.GridLayout(1, 0, 4, 0));
        pnlDerecho.add(pnlBotones);

        javax.swing.GroupLayout pnlFondoLayout = new javax.swing.GroupLayout(pnlFondo);
        pnlFondo.setLayout(pnlFondoLayout);
        pnlFondoLayout.setHorizontalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFondoLayout.createSequentialGroup()
                .addComponent(lblIcono)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sptSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDerecho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlFondoLayout.setVerticalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblIcono, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDerecho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sptSeparador))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    /**
     * Inicializa los componentes de la ventana según el tipo de mensaje a
     * mostrar.
     *
     * @param tipoMensaje tipo de mensaje que mostrará la ventana.
     */
    private void inicializarComponentes(TipoMensaje tipoMensaje) {
        lblContenido.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblContenido.setForeground(new Color(51, 51, 51));
        lblTitulo.setFont(LookAndFeelEntropy.FUENTE_TITULO);
        BotonGradiente btnAceptar;
        BotonGradiente btnNo;
        BotonGradiente btnCancelar;
        switch (tipoMensaje) {
            case ADVERTENCIA:
                lblTitulo.setText("Atención");
                lblTitulo.setForeground(new Color(204, 153, 0));
                pnlFondoAux.setColor(new Color(239, 192, 63));
                sptSeparador.setForeground(new Color(255, 153, 0));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_advertencia.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_advertencia.png"));
                pnlFondo.setBorder(new LineBorder(new Color(255, 102, 0), 1, true));
                break;

            case ERROR:
                lblTitulo.setText("Error");
                lblTitulo.setForeground(new Color(226, 0, 67));
                pnlFondoAux.setColor(new Color(246, 147, 170));
                sptSeparador.setForeground(new Color(193, 0, 44));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_error.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_error.png"));
                pnlFondo.setBorder(new LineBorder(new Color(193, 0, 44), 1, true));
                break;

            case EXITO:
                lblTitulo.setText("Éxito");
                lblTitulo.setForeground(new Color(99, 123, 29));
                pnlFondoAux.setColor(new Color(199, 221, 120));
                sptSeparador.setForeground(new Color(136, 151, 81));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_exito.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_exito.png"));
                pnlFondo.setBorder(new LineBorder(new Color(136, 151, 81), 1, true));
                break;

            case INFORMACION:
                lblTitulo.setText("Información");
                lblTitulo.setForeground(new Color(0, 127, 193));
                pnlFondoAux.setColor(new Color(147, 212, 246));
                sptSeparador.setForeground(new Color(0, 127, 193));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_informacion.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_informacion.png"));
                pnlFondo.setBorder(new LineBorder(new Color(0, 127, 193), 1, true));
                break;

            case OPCION_YES_CANCEL:
                btnAceptar = new BotonGradiente("Aceptar", new Color(252, 193, 144), new Color(232, 121, 32));
                btnAceptar.setPreferredSize(new Dimension(30, 30));
                btnAceptar.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                btnAceptar.setOpaque(false);
                btnAceptar.setContentAreaFilled(false);
                btnAceptar.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        intOpcionElegida = JOptionPane.YES_OPTION;
                        dispose();
                    }
                });
                btnCancelar = new BotonGradiente("Cancelar", new Color(252, 193, 144), new Color(232, 121, 32));
                btnCancelar.setPreferredSize(new Dimension(30, 30));
                btnCancelar.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                btnCancelar.setOpaque(false);
                btnCancelar.setContentAreaFilled(false);
                btnCancelar.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        intOpcionElegida = JOptionPane.CANCEL_OPTION;
                        dispose();
                    }
                });
                pnlBotones.setPreferredSize(new Dimension(pnlBotones.getPreferredSize().width, btnAceptar.getPreferredSize().height));
                pnlBotones.add(btnAceptar);
                pnlBotones.add(btnCancelar);
                lblTitulo.setText("Confirmación");
                lblTitulo.setForeground(new Color(255, 102, 0));
                pnlFondoAux.setColor(new Color(235, 204, 114));
                sptSeparador.setForeground(new Color(255, 153, 0));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_opcion.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_opcion.png"));
                pnlFondo.setBorder(new LineBorder(new Color(255, 102, 0), 1, true));
                break;
            case OPCION_YES_NO_CANCEL:
                btnAceptar = new BotonGradiente("Sí", new Color(252, 193, 144), new Color(232, 121, 32));
                btnAceptar.setPreferredSize(new Dimension(30, 30));
                btnAceptar.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                btnAceptar.setOpaque(false);
                btnAceptar.setContentAreaFilled(false);
                btnAceptar.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        intOpcionElegida = JOptionPane.YES_OPTION;
                        dispose();
                    }
                });
                btnNo = new BotonGradiente("No", new Color(252, 193, 144), new Color(232, 121, 32));
                btnNo.setPreferredSize(new Dimension(30, 30));
                btnNo.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                btnNo.setOpaque(false);
                btnNo.setContentAreaFilled(false);
                btnNo.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        intOpcionElegida = JOptionPane.NO_OPTION;
                        dispose();
                    }
                });

                btnCancelar = new BotonGradiente("Cancelar", new Color(252, 193, 144), new Color(232, 121, 32));
                btnCancelar.setPreferredSize(new Dimension(30, 30));
                btnCancelar.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                btnCancelar.setOpaque(false);
                btnCancelar.setContentAreaFilled(false);
                btnCancelar.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        intOpcionElegida = JOptionPane.CANCEL_OPTION;
                        dispose();
                    }
                });
                pnlBotones.setPreferredSize(new Dimension(pnlBotones.getPreferredSize().width, btnAceptar.getPreferredSize().height));
                pnlBotones.add(btnAceptar);
                pnlBotones.add(btnNo);
                pnlBotones.add(btnCancelar);
                lblTitulo.setText("Opción");
                lblTitulo.setForeground(new Color(255, 102, 0));
                pnlFondoAux.setColor(new Color(235, 204, 114));
                sptSeparador.setForeground(new Color(255, 153, 0));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_opcion.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_opcion.png"));
                pnlFondo.setBorder(new LineBorder(new Color(255, 102, 0), 1, true));
                break;
            case OPCION_CUSTOM:
                
                for (int i = 0; i < colBotones.length; i++) {
                    JButton btn = new BotonGradiente(colBotones[i], new Color(252, 193, 144), new Color(232, 121, 32));
                    
                    btn.setPreferredSize(new Dimension(30, 30));
                    btn.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
                    btn.setOpaque(false);
                    btn.setName(i+"");
                    btn.setContentAreaFilled(false);
                    btn.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            intOpcionElegida = Integer.parseInt(((JButton) e.getSource()).getName());
                            dispose();
                        }
                    });
                    pnlBotones.setPreferredSize(new Dimension(pnlBotones.getPreferredSize().width, btn.getPreferredSize().height));
                    pnlBotones.add(btn);
                }
                lblTitulo.setText("Opción");
                lblTitulo.setForeground(new Color(255, 102, 0));
                pnlFondoAux.setColor(new Color(235, 204, 114));
                sptSeparador.setForeground(new Color(255, 153, 0));
                lblIcono.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_opcion.png"));
                btnCerrar.setIcon(GestorImagenes.crearImageIcon("/frontend/imagenes/ic_mensajes_cerrar_opcion.png"));
                pnlFondo.setBorder(new LineBorder(new Color(255, 102, 0), 1, true));
                break;
        }
    }

    /**
     * Setea un nuevo texto para mostrar al usuario.
     *
     * @param texto nuevo texto.
     */
    public void setContenido(String texto) {
        int intAltoCaracter = lblContenido.getFontMetrics(LookAndFeelEntropy.FUENTE_REGULAR).getHeight() + 2;
        int intAnchoActual = lblContenido.getPreferredSize().width;
        int intAnchoDeseado = 0;
        int intCantidadLineas = 1;
        for (char c : texto.toCharArray()) {
            intAnchoDeseado += lblContenido.getFontMetrics(LookAndFeelEntropy.FUENTE_REGULAR).charWidth(c);
            if (intAnchoDeseado > intAnchoActual * intCantidadLineas) {
                intCantidadLineas++;
            }
        }
        int intNuevaAltura = intAltoCaracter * intCantidadLineas;
        if (intNuevaAltura > lblContenido.getHeight()) {
            lblContenido.setPreferredSize(new Dimension(intAnchoActual, intNuevaAltura));
            lblContenido.setSize(new Dimension(intAnchoActual, intNuevaAltura));
            lblContenido.setMinimumSize(new Dimension(intAnchoActual, intNuevaAltura));
        }
        lblContenido.setText("<html>" + texto.replace("\n", "<br>") + "<br></html>");
    }

    /**
     * Devuelve la opción elegida si es un mensaje de opción.
     *
     * @return <code>JOptionPane.YES_OPTION</code>,
     * <code>JOptionPane.NO_OPTION</code>,
     * <code>JOptionPane.CANCEL_OPTION</code>,
     */
    public int getOpcionElegida() {
        return intOpcionElegida;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCerrar;
    private javax.swing.JLabel lblContenido;
    private javax.swing.JLabel lblIcono;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlBotones;
    private javax.swing.JPanel pnlDerecho;
    private javax.swing.JPanel pnlFondo;
    PanelGradiente pnlFondoAux;
    private javax.swing.JPanel pnlTexto;
    private javax.swing.JSeparator sptSeparador;
    // End of variables declaration//GEN-END:variables

    /**
     * Representa un panel con fondo de gradiente.
     */
    private class PanelGradiente extends JPanel {

        private Color color;

        /**
         * Constructor de la clase.
         *
         * @param color el gradiente comenzará en blanco hasta el color pasado
         * por parámetro, desde arriba hacia abajo.
         */
        public PanelGradiente(Color color) {
            this.color = color;
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            int h = getHeight();
            int w = getWidth();

            GradientPaint gradientPaint = new GradientPaint(0, 0, Color.WHITE, 0, h, color);

            Graphics2D g2D = (Graphics2D) g;
            g2D.setPaint(gradientPaint);
            g2D.fillRect(0, 0, w, h);
            repaint();
        }

        /**
         * Modifica el color de gradiente del panel.
         *
         * @param color nuevo color.
         */
        public void setColor(Color color) {
            this.color = color;
            this.repaint();
        }

    }

    /**
     * Representa un botón con fondo de gradiente.
     */
    private class BotonGradiente extends JButton {

        private Color color1, color2;

        /**
         * Constructor de la clase.
         *
         * @param strTexto texto a mostrarse en el botón.
         * @param color1 color del margen superior.
         * @param color2 color del margen inferior.
         */
        public BotonGradiente(String strTexto, Color color1, Color color2) {
            super.setText(strTexto);
            this.color1 = color1;
            this.color2 = color2;
        }

        @Override
        protected void paintComponent(Graphics g) {

            int h = getHeight();
            int w = getWidth();

            GradientPaint gradientPaint = new GradientPaint(0, 0, color1, 0, h, color2);

            Graphics2D g2D = (Graphics2D) g;
            g2D.setPaint(gradientPaint);
            g2D.fillRect(0, 0, w, h);

            super.paintComponent(g);
        }

        /**
         * Modifica el color de gradiente del botón.
         *
         * @param color1 color del margen superior.
         * @param color2 color del margen inferior.
         */
        public void setColor(Color color1, Color color2) {
            this.color1 = color1;
            this.color2 = color2;
            this.repaint();
        }

    }

    /**
     * Clase que escucha por el tecleo de la tecla Esc.
     */
    private class EscapeAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            dispose();
        }
    }
}
