package frontend.tomaexamenes;

import backend.auxiliares.Mensajes;
import backend.diseños.Curso;
import backend.diseños.DiseñoExamen;
import backend.diseños.Institucion;
import backend.examenes.Examen;
import backend.gestores.GestorImportarPregunta;
import frontend.auxiliares.CeldaListaRendererEntropy;
import frontend.auxiliares.FiltroTexto;
import frontend.auxiliares.LookAndFeelEntropy;
import java.util.ArrayList;
import javax.swing.JSpinner;
import javax.swing.JTextField;

/**
 * Clase que representa el panel para el ingreso de datos sobre el examen, en la
 * toma de exámenes.
 *
 * @author Denise
 */
public class PanelTomarExamenDatosExtras extends javax.swing.JPanel {

    private Object ultimoComboActivo;
    private final PanelTomaExamen padre;

    /**
     * Constructor de la clase.
     *
     * @param padre instancia de <code>PanelTomaExamen</code>.
     */
    public PanelTomarExamenDatosExtras(PanelTomaExamen padre) {
        this.padre = padre;
        initComponents();
        for (Institucion i : padre.getGestorDiseñoExamen().getInstitucionesPorFiltro("")) {
            cmbInstitucion.addItem(i);
        }
        this.lblExamen.setText(padre.getDiseño().getStrNombre());
        this.lblDescripcion.setText(padre.getDiseño().getStrDescripcion());
        this.lblDescripcion.setToolTipText(padre.getDiseño().getStrDescripcion());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSiguiente = new javax.swing.JLabel();
        pnlEncabezado = new javax.swing.JPanel();
        pnlDatosExamen = new javax.swing.JPanel();
        upperSeparator = new javax.swing.JSeparator();
        lblsExamen = new javax.swing.JLabel();
        lblsDescripcion = new javax.swing.JLabel();
        lblExamen = new javax.swing.JLabel();
        lblDescripcion = new javax.swing.JLabel();
        lowerSeparator = new javax.swing.JSeparator();
        pnlConfirmacionCurso = new javax.swing.JPanel();
        lblNombreInstitucion = new javax.swing.JLabel();
        cmbInstitucion = new javax.swing.JComboBox();
        lblCurso = new javax.swing.JLabel();
        cmbCurso = new javax.swing.JComboBox();
        pnlOtrosDatos = new javax.swing.JPanel();
        lblFormaPresentacion = new javax.swing.JLabel();
        cmbFormaPresentacion = new javax.swing.JComboBox();
        lblDuracion = new javax.swing.JLabel();
        spnHoras = new javax.swing.JSpinner();
        lblSeparadorHorasMinutos = new javax.swing.JLabel();
        spnMinutos = new javax.swing.JSpinner();
        lblHoras = new javax.swing.JLabel();
        lblsPorcentajeAprobacion = new javax.swing.JLabel();
        txtPorcentajeAprobado = new frontend.auxiliares.TextFieldEntropy();
        lblsSignoPorcentaje = new javax.swing.JLabel();
        chbEsMostrarCorreccion = new javax.swing.JCheckBox();
        chbEsValidarCodigo = new javax.swing.JCheckBox();

        lblSiguiente.setBackground(new java.awt.Color(227, 226, 226));
        lblSiguiente.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_siguiente.png"))); // NOI18N
        lblSiguiente.setToolTipText("");
        lblSiguiente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSiguiente.setOpaque(true);
        lblSiguiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSiguienteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblSiguienteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblSiguienteMouseExited(evt);
            }
        });

        pnlEncabezado.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos generales del examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR, new java.awt.Color(204, 102, 0)));
        pnlEncabezado.setLayout(new javax.swing.BoxLayout(pnlEncabezado, javax.swing.BoxLayout.Y_AXIS));

        pnlDatosExamen.setBackground(LookAndFeelEntropy.COLOR_TABLA_PRIMARIO);
        pnlDatosExamen.setMaximumSize(new java.awt.Dimension(32767, 109));
        pnlDatosExamen.setName(""); // NOI18N

        upperSeparator.setForeground(LookAndFeelEntropy.COLOR_ENTROPY);

        lblsExamen.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblsExamen.setForeground(LookAndFeelEntropy.COLOR_FUENTE_TITULO_PANEL);
        lblsExamen.setText("Examen:");

        lblsDescripcion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblsDescripcion.setForeground(LookAndFeelEntropy.COLOR_FUENTE_TITULO_PANEL);
        lblsDescripcion.setText("Descripción:");

        lblExamen.setFont(LookAndFeelEntropy.FUENTE_NEGRITA);
        lblExamen.setText("Examen");

        lblDescripcion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblDescripcion.setText("Descripción");

        lowerSeparator.setForeground(LookAndFeelEntropy.COLOR_ENTROPY);

        javax.swing.GroupLayout pnlDatosExamenLayout = new javax.swing.GroupLayout(pnlDatosExamen);
        pnlDatosExamen.setLayout(pnlDatosExamenLayout);
        pnlDatosExamenLayout.setHorizontalGroup(
            pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lowerSeparator)
                    .addComponent(upperSeparator, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlDatosExamenLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblsExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblsDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescripcion, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                            .addComponent(lblExamen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlDatosExamenLayout.setVerticalGroup(
            pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upperSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblExamen)
                    .addComponent(lblsExamen, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblsDescripcion)
                    .addComponent(lblDescripcion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lowerSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );

        pnlEncabezado.add(pnlDatosExamen);

        pnlConfirmacionCurso.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Confirmación de curso", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR));
        pnlConfirmacionCurso.setMaximumSize(new java.awt.Dimension(32767, 112));

        lblNombreInstitucion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblNombreInstitucion.setText("Institución:");

        cmbInstitucion.setBackground(new java.awt.Color(255, 204, 102));
        cmbInstitucion.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cmbInstitucion.setRenderer(new CeldaListaRendererEntropy());
        cmbInstitucion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbInstitucionItemStateChanged(evt);
            }
        });
        cmbInstitucion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbInstitucionFocusGained(evt);
            }
        });

        lblCurso.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblCurso.setText("Curso:");

        cmbCurso.setBackground(new java.awt.Color(255, 204, 102));
        cmbCurso.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        cmbCurso.setRenderer(new CeldaListaRendererEntropy());
        cmbCurso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbCursoFocusGained(evt);
            }
        });

        javax.swing.GroupLayout pnlConfirmacionCursoLayout = new javax.swing.GroupLayout(pnlConfirmacionCurso);
        pnlConfirmacionCurso.setLayout(pnlConfirmacionCursoLayout);
        pnlConfirmacionCursoLayout.setHorizontalGroup(
            pnlConfirmacionCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfirmacionCursoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConfirmacionCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNombreInstitucion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConfirmacionCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbInstitucion, 0, 353, Short.MAX_VALUE)
                    .addComponent(cmbCurso, 0, 353, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlConfirmacionCursoLayout.setVerticalGroup(
            pnlConfirmacionCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConfirmacionCursoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConfirmacionCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombreInstitucion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbInstitucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConfirmacionCursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlEncabezado.add(pnlConfirmacionCurso);

        pnlOtrosDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Otros datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR));

        lblFormaPresentacion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblFormaPresentacion.setText("Forma de presentación de las preguntas:");

        cmbFormaPresentacion.setBackground(new java.awt.Color(255, 204, 102));
        cmbFormaPresentacion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        cmbFormaPresentacion.setRenderer(new CeldaListaRendererEntropy());
        cmbFormaPresentacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Aleatoria", "Por tema", "Establecida en el diseño" }));

        lblDuracion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblDuracion.setText("Duración:");

        spnHoras.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        spnHoras.setModel(new javax.swing.SpinnerNumberModel(1, 0, 24, 1));
        JTextField txtHorasEditor = ((JSpinner.DefaultEditor) spnHoras.getEditor()).getTextField();
        txtHorasEditor.setCaretColor(LookAndFeelEntropy.COLOR_CURSOR);
        txtHorasEditor.setSelectionColor(LookAndFeelEntropy.COLOR_SELECCION_TEXTO);

        lblSeparadorHorasMinutos.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblSeparadorHorasMinutos.setText(":");

        spnMinutos.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        spnMinutos.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        JTextField txtMinutosEditor = ((JSpinner.DefaultEditor) spnMinutos.getEditor()).getTextField();
        txtMinutosEditor.setCaretColor(LookAndFeelEntropy.COLOR_CURSOR);
        txtMinutosEditor.setSelectionColor(LookAndFeelEntropy.COLOR_SELECCION_TEXTO);

        lblHoras.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblHoras.setText("hs");

        lblsPorcentajeAprobacion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblsPorcentajeAprobacion.setText("Porcentaje de aprobación:");

        FiltroTexto filtro = new FiltroTexto(FiltroTexto.TipoFiltro.NUMEROS_DECIMALES_POSITIVOS);
        filtro.setLongitudMaxima(5);
        txtPorcentajeAprobado.setDocument(filtro);
        txtPorcentajeAprobado.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPorcentajeAprobado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorcentajeAprobadoFocusLost(evt);
            }
        });
        txtPorcentajeAprobado.setTextoPorDefecto("---");
        txtPorcentajeAprobado.mostrarTextoPorDefecto();
        txtPorcentajeAprobado.setText("60");

        lblsSignoPorcentaje.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblsSignoPorcentaje.setText("%");

        chbEsMostrarCorreccion.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        chbEsMostrarCorreccion.setSelected(true);
        chbEsMostrarCorreccion.setText("<html>Mostrar al alumno la corrección de las preguntas de corrección automática al finalizar el examen.</html>");
        chbEsMostrarCorreccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_checkbox.png"))); // NOI18N
        chbEsMostrarCorreccion.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_checkbox_selected.png"))); // NOI18N

        chbEsValidarCodigo.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        chbEsValidarCodigo.setSelected(true);
        chbEsValidarCodigo.setText("<html>Realizar validación de código.</html>");
        chbEsValidarCodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_checkbox.png"))); // NOI18N
        chbEsValidarCodigo.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_checkbox_selected.png"))); // NOI18N

        javax.swing.GroupLayout pnlOtrosDatosLayout = new javax.swing.GroupLayout(pnlOtrosDatos);
        pnlOtrosDatos.setLayout(pnlOtrosDatosLayout);
        pnlOtrosDatosLayout.setHorizontalGroup(
            pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOtrosDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOtrosDatosLayout.createSequentialGroup()
                        .addComponent(lblFormaPresentacion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbFormaPresentacion, 0, 230, Short.MAX_VALUE))
                    .addGroup(pnlOtrosDatosLayout.createSequentialGroup()
                        .addGroup(pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlOtrosDatosLayout.createSequentialGroup()
                                .addComponent(lblDuracion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSeparadorHorasMinutos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblHoras))
                            .addGroup(pnlOtrosDatosLayout.createSequentialGroup()
                                .addComponent(lblsPorcentajeAprobacion)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPorcentajeAprobado, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblsSignoPorcentaje)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(chbEsMostrarCorreccion, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(chbEsValidarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        pnlOtrosDatosLayout.setVerticalGroup(
            pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOtrosDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFormaPresentacion)
                    .addComponent(cmbFormaPresentacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDuracion)
                    .addComponent(spnHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSeparadorHorasMinutos)
                    .addComponent(spnMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHoras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlOtrosDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblsPorcentajeAprobacion)
                    .addComponent(txtPorcentajeAprobado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblsSignoPorcentaje))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chbEsMostrarCorreccion, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chbEsValidarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pnlEncabezado.add(pnlOtrosDatos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSiguiente))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblSiguiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlEncabezado, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCursoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbCursoFocusGained
        this.ultimoComboActivo = evt.getComponent();
    }//GEN-LAST:event_cmbCursoFocusGained

    private void cmbInstitucionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbInstitucionFocusGained
        this.ultimoComboActivo = evt.getComponent();
    }//GEN-LAST:event_cmbInstitucionFocusGained

    private void cmbInstitucionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbInstitucionItemStateChanged
        if (ultimoComboActivo == evt.getSource() || cmbInstitucion.getSelectedIndex() != -1) {
            this.limpiarCursos();
            ArrayList<Curso> colCurso = this.getCursos((Institucion) this.cmbInstitucion.getSelectedItem());
            for (Curso curso : colCurso) {
                this.cmbCurso.addItem(curso);
            }
        }
    }//GEN-LAST:event_cmbInstitucionItemStateChanged

    private void lblSiguienteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSiguienteMouseEntered
        this.padre.getGestorEstados().setEstadoInstantaneo("Ir al paso 2: datos de red...");
    }//GEN-LAST:event_lblSiguienteMouseEntered

    private void lblSiguienteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSiguienteMouseExited
        this.padre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_lblSiguienteMouseExited

    private void lblSiguienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSiguienteMouseClicked
        if (!this.validarDatosObligatorios()) {
            Mensajes.mostrarError("Todos los campos son obligatorios.");
            return;
        }
        padre.mostrarBotonPublicar(true);
        padre.getPanelDeslizante().setPanelMostrado(padre.getPanelDatosRed(), false);
        padre.getVentanaPrincipal().setTitle(padre.getVentanaPrincipal().getTitle().replaceFirst("Paso 1", "Paso 2"));
    }//GEN-LAST:event_lblSiguienteMouseClicked

    private void txtPorcentajeAprobadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorcentajeAprobadoFocusLost
        if (txtPorcentajeAprobado.getText().endsWith(".")) {
            txtPorcentajeAprobado.setText(txtPorcentajeAprobado.getText() + "0");
        }
    }//GEN-LAST:event_txtPorcentajeAprobadoFocusLost

    /**
     * Setea el combo box de cursos a sus valores iniciales.
     */
    private void limpiarCursos() {
        this.cmbCurso.removeAllItems();
    }

    public void cargarCombos(Institucion institucion, Curso curso) {
        if (institucion != null) {
            this.cmbInstitucion.setSelectedItem(institucion);
            if (curso != null) {
                this.cmbCurso.setSelectedItem(curso);
            } else {
                this.cmbCurso.setSelectedIndex(0);
            }
        } else {
            this.cmbInstitucion.setSelectedIndex(-1);
            this.cmbCurso.setSelectedIndex(-1);
        }
    }

    public int getHoras() {
        return Integer.parseInt(this.spnHoras.getModel().getValue().toString());
    }

    public int getMinutos() {
        return Integer.parseInt(this.spnMinutos.getModel().getValue().toString());
    }

    public Curso getCursoSeleccionado() {
        return (Curso) cmbCurso.getSelectedItem();
    }

    public double getPorcentajeAprobacion(){
        return Double.parseDouble(txtPorcentajeAprobado.getText());
    }
    
    public boolean esMostrarCorreccionAutomatica(){
        return chbEsMostrarCorreccion.isSelected();
    }
    
    public boolean esValidarCodigo() {
        return chbEsValidarCodigo.isSelected();
    }
    
    /**
     * Se comunica con el gestor de importacion para buscar todos los cursos que
     * pertenecen a una Institucion.
     *
     * @param institucion la institucion por la que se quiere filtrar.
     * @return Coleccion de cursos que tiene la institucion.
     */
    private ArrayList<Curso> getCursos(Institucion institucion) {
        GestorImportarPregunta gestPregunta = new GestorImportarPregunta();
        return gestPregunta.getCursos(institucion);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chbEsMostrarCorreccion;
    private javax.swing.JCheckBox chbEsValidarCodigo;
    private javax.swing.JComboBox cmbCurso;
    private javax.swing.JComboBox cmbFormaPresentacion;
    private javax.swing.JComboBox cmbInstitucion;
    private javax.swing.JLabel lblCurso;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblDuracion;
    private javax.swing.JLabel lblExamen;
    private javax.swing.JLabel lblFormaPresentacion;
    private javax.swing.JLabel lblHoras;
    private javax.swing.JLabel lblNombreInstitucion;
    private javax.swing.JLabel lblSeparadorHorasMinutos;
    private javax.swing.JLabel lblSiguiente;
    private javax.swing.JLabel lblsDescripcion;
    private javax.swing.JLabel lblsExamen;
    private javax.swing.JLabel lblsPorcentajeAprobacion;
    private javax.swing.JLabel lblsSignoPorcentaje;
    private javax.swing.JSeparator lowerSeparator;
    private javax.swing.JPanel pnlConfirmacionCurso;
    private javax.swing.JPanel pnlDatosExamen;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JPanel pnlOtrosDatos;
    private javax.swing.JSpinner spnHoras;
    private javax.swing.JSpinner spnMinutos;
    private frontend.auxiliares.TextFieldEntropy txtPorcentajeAprobado;
    private javax.swing.JSeparator upperSeparator;
    // End of variables declaration//GEN-END:variables

    /**
     * Valida que los campos obligatorios de la pantalla hayan sido ingresados.
     *
     * @return true si todos los campos son correctos, false de lo contrario.
     */
    public boolean validarDatosObligatorios() {
        if (cmbInstitucion.getSelectedIndex() == -1
                || cmbCurso.getSelectedIndex() == -1
                || (((int) spnHoras.getValue()) * 60 + ((int) spnMinutos.getValue())) == 0
                || txtPorcentajeAprobado.getText().isEmpty()
                || Double.parseDouble(txtPorcentajeAprobado.getText()) == 0) {
            return false;
        }
        return true;
    }

    /**
     * Devuelve la forma de presentación de preguntas seleccionada-
     * 
     * @return objeto del tipo <code>Examen.OrdenLista</code>
     */
    public Examen.OrdenLista getOrdenPresentacion() {
        if (cmbFormaPresentacion.getSelectedIndex() == 0)
            return Examen.OrdenLista.ALEATORIO;
        else if (cmbFormaPresentacion.getSelectedIndex() == 1)
            return Examen.OrdenLista.POR_TEMA;
        else 
            return Examen.OrdenLista.SEGUN_DISEÑO;
    }
}
