package frontend.diseños;

import backend.auxiliares.Mensajes;
import backend.diseños.CombinacionRelacionColumnas;
import frontend.auxiliares.CeldaBotonRendererEntropy;
import frontend.auxiliares.CeldaMultiLineaRendererEntropy;
import frontend.auxiliares.GestorImagenes;
import frontend.auxiliares.LookAndFeelEntropy;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 * Clase que representa el panel de edición de preguntas numéricas.
 * 
 * @author Denise
 */
public class PanelPreguntaRelacionDeColumnas extends javax.swing.JPanel {

    /**
     * Constructor por defecto de la clase.
     */
    public PanelPreguntaRelacionDeColumnas() {
        initComponents();
        tblCombinaciones.getColumn("Eliminar").setMaxWidth(70);
        tblCombinaciones.getTableHeader().setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        
        tblCombinaciones.setDefaultRenderer(String.class, new CeldaMultiLineaRendererEntropy(tblCombinaciones, true));
        tblCombinaciones.setDefaultEditor(String.class, new CeldaMultiLineaRendererEntropy(tblCombinaciones, true));
        
        Action eliminar = new AbstractAction("Eliminar") {
            @Override
            public void actionPerformed(ActionEvent e) {
                JTable table = (JTable) e.getSource();
                int fila = Integer.valueOf(e.getActionCommand());
                if (fila != tblCombinaciones.getRowCount()-1) {
                    ((DefaultTableModel)table.getModel()).removeRow(fila);
                     tblCombinaciones.setRowSelectionInterval(fila, fila);
                }
            }
        };
        tblCombinaciones.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() != TableModelEvent.UPDATE) return;
                int fila = e.getLastRow();
                if (fila == tblCombinaciones.getRowCount()-1) {
                    String strDescripcionUltima  = (tblCombinaciones.getValueAt(fila, 0) == null) ? "" : tblCombinaciones.getValueAt(fila, 0).toString();
                    strDescripcionUltima        += (tblCombinaciones.getValueAt(fila, 1) == null) ? "" : tblCombinaciones.getValueAt(fila, 1).toString();
                    if (!strDescripcionUltima.isEmpty()) {
                        ((DefaultTableModel)tblCombinaciones.getModel()).addRow(new Object[] {"", "", null});
                    }
                }
                for (int i = 0; i < tblCombinaciones.getRowCount() - 1; i++){
                    String strColumna1 = (tblCombinaciones.getValueAt(i, 0) == null) ? "" : tblCombinaciones.getValueAt(i, 0).toString();
                    String strColumna2 = (tblCombinaciones.getValueAt(i, 1) == null) ? "" : tblCombinaciones.getValueAt(i, 1).toString();
                    if (strColumna1.isEmpty() && strColumna2.isEmpty()){
                        ((DefaultTableModel)tblCombinaciones.getModel()).removeRow(i);
                    }
                }
            }
        });
        
        CeldaBotonRendererEntropy celdaBotonRendererEntropy = new CeldaBotonRendererEntropy(
                tblCombinaciones,
                eliminar,
                2,
                GestorImagenes.crearImageIcon("/frontend/imagenes/ic_borrar_cuadrado.png"),
                GestorImagenes.crearImageIcon("/frontend/imagenes/ic_borrar_cuadrado_presionado.png")
        );
        
        ((DefaultTableModel) tblCombinaciones.getModel()).addRow(new Object[] {"", "", null});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrOpciones = new javax.swing.JScrollPane();
        tblCombinaciones = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Opciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 0, 12), java.awt.Color.black)); // NOI18N

        tblCombinaciones.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tblCombinaciones.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        tblCombinaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Columna 1", "Columna 2", "Eliminar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblCombinaciones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCombinaciones.getTableHeader().setReorderingAllowed(false);
        scrOpciones.setViewportView(tblCombinaciones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrOpciones, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public ArrayList<CombinacionRelacionColumnas> getCombinaciones() {
        ArrayList<CombinacionRelacionColumnas> colCombinaciones = new ArrayList<>();
        
        for (int i = 0; i < tblCombinaciones.getRowCount() - 1; i++) {
            
            CombinacionRelacionColumnas nuevaCombinacion = new CombinacionRelacionColumnas(
                    i + 1,
                    tblCombinaciones.getValueAt(i, 0).toString(),
                    tblCombinaciones.getValueAt(i, 1).toString());
            
            colCombinaciones.add(nuevaCombinacion);
        }
        
        return colCombinaciones;
    }
    
    public void setCombinaciones(ArrayList<CombinacionRelacionColumnas> colCombinaciones) {
        ((DefaultTableModel) tblCombinaciones.getModel()).removeRow(0);
        for(CombinacionRelacionColumnas combinacion : colCombinaciones) {
            ((DefaultTableModel) tblCombinaciones.getModel()).addRow(new Object[] {combinacion.getStrColumnaIzquierda(), combinacion.getStrColumnaDerecha()});
        }
        ((DefaultTableModel) tblCombinaciones.getModel()).addRow(new Object[] {"", "", null});
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrOpciones;
    private javax.swing.JTable tblCombinaciones;
    // End of variables declaration//GEN-END:variables
}
