package frontend.diseños;

import backend.auxiliares.Mensajes;
import backend.diseños.Pregunta;
import backend.diseños.PreguntaMultipleOpcion;
import backend.diseños.PreguntaNumerica;
import backend.diseños.PreguntaRelacionColumnas;
import backend.diseños.PreguntaVerdaderoFalso;
import backend.diseños.Tema;
import backend.diseños.TipoPregunta;
import frontend.auxiliares.CeldaListaRendererEntropy;
import frontend.auxiliares.FiltroTexto;
import frontend.auxiliares.GestorBarrasDeEstado;
import frontend.auxiliares.LookAndFeelEntropy;
import frontend.auxiliares.TextAreaTags;
import frontend.inicio.VentanaPrincipal;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;

/**
 * Clase que representa al panel de contenido de examen.
 *
 * @author Denise
 */
public class PanelContenidoExamen extends javax.swing.JPanel {

    private final PanelDiseño mPadre;
    private Pregunta preguntaSeleccionada;
    private int intIndexSeleccionado;
    private DefaultListModel defaultLstPreguntas;
    private PanelPreguntaVerdaderoFalso pnlPreguntaVerdaderoFalso;
    private PanelPreguntaMultiplesOpciones pnlPreguntaMuliplesOpciones;
    private PanelPreguntaNumerica pnlPreguntaNumerica;
    private PanelPreguntaRelacionDeColumnas pnlPreguntaRelacionColumnas;

    // True si agrega una pregunta, false si cambia del List de Preguntas
    private boolean blnAgrega;
    private boolean blnRechargingList;

    /**
     * Constructor de la clase.
     *
     * @param mPadre
     */
    public PanelContenidoExamen(PanelDiseño mPadre) {
        this.mPadre = mPadre;
        initComponents();
        this.defaultLstPreguntas = new DefaultListModel();
        this.lstPreguntas.setModel(defaultLstPreguntas);
        this.lblEnunciado.grabFocus();

        habilitarContenedor(pnlPreguntaSeleccionada, false);
        this.cmbTema.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        this.cmbTema.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                keyReleasedCmbTema(e);
            }
        });
        mPadre.getGestorDiseñoExamen().setColPreguntas(mPadre.getGestorDiseñoExamen().getPreguntasDiseño());
        cargarComboTemas();
        recargarLista(0);
    }

    private void cargarComboTemas() {
        for (Tema tema : mPadre.getGestorDiseñoExamen().getColTemas()) {
            cmbTema.addItem(tema);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContenido = new javax.swing.JPanel();
        pnlPreguntas = new javax.swing.JPanel();
        scrPreguntas = new javax.swing.JScrollPane();
        lstPreguntas = new javax.swing.JList();
        btnNuevaPregunta = new javax.swing.JButton();
        btnDuplicarPregunta = new javax.swing.JButton();
        btnEliminarPregunta = new javax.swing.JButton();
        btnSubirPregunta = new javax.swing.JButton();
        btnBajarPregunta = new javax.swing.JButton();
        btnImportarPregunta = new javax.swing.JButton();
        pnlPreguntaSeleccionada = new javax.swing.JPanel();
        pnlDatosGeneralesPregunta = new javax.swing.JPanel();
        lblTemaPregunta = new javax.swing.JLabel();
        lblEnunciado = new javax.swing.JLabel();
        cmbTipoPregunta = new javax.swing.JComboBox();
        lblTipoPregunta = new javax.swing.JLabel();
        lblPuntaje = new javax.swing.JLabel();
        lblComentario = new javax.swing.JLabel();
        lblTags = new javax.swing.JLabel();
        lblNivel = new javax.swing.JLabel();
        cmbNivel = new javax.swing.JComboBox();
        scrEnunciado = new javax.swing.JScrollPane();
        txaEnunciado = new frontend.auxiliares.TextAreaEntropy();
        scrComentario = new javax.swing.JScrollPane();
        txaComentario = new frontend.auxiliares.TextAreaEntropy();
        scrTags = new javax.swing.JScrollPane();
        txaTags = new TextAreaTags(mPadre.getVentanaPrincipal(), this, mPadre.getGestorDiseñoExamen().getGestorTags());
        txtPuntaje = new frontend.auxiliares.TextFieldEntropy();
        cmbTema = new frontend.auxiliares.ComboBoxEntropy();
        lblCamposObligatorios = new javax.swing.JLabel();
        pnlAdjuntos = new javax.swing.JPanel();
        lblRutaAdjunto = new javax.swing.JLabel();
        btnAdjunto = new javax.swing.JButton();
        scrTipoPregunta = new javax.swing.JScrollPane();
        lblAnterior = new javax.swing.JLabel();

        pnlContenido.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contenido del examen", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR, new java.awt.Color(204, 102, 0)));

        pnlPreguntas.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Preguntas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR, new java.awt.Color(102, 102, 102)));
        pnlPreguntas.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        pnlPreguntas.setMaximumSize(new java.awt.Dimension(600, 32767));

        scrPreguntas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 51, 0)));
        scrPreguntas.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        lstPreguntas.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        lstPreguntas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstPreguntas.setCellRenderer(new CeldaListaRendererEntropy());
        lstPreguntas.setSelectionBackground(new java.awt.Color(255, 204, 102));
        lstPreguntas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPreguntasValueChanged(evt);
            }
        });
        scrPreguntas.setViewportView(lstPreguntas);

        btnNuevaPregunta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_nuevo_25x25.png"))); // NOI18N
        btnNuevaPregunta.setToolTipText("");
        btnNuevaPregunta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnNuevaPregunta.setContentAreaFilled(false);
        btnNuevaPregunta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevaPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNuevaPreguntaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNuevaPreguntaMouseExited(evt);
            }
        });
        btnNuevaPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaPreguntaActionPerformed(evt);
            }
        });

        btnDuplicarPregunta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_duplicar_25x25.png"))); // NOI18N
        btnDuplicarPregunta.setToolTipText("");
        btnDuplicarPregunta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnDuplicarPregunta.setContentAreaFilled(false);
        btnDuplicarPregunta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDuplicarPregunta.setEnabled(false);
        btnDuplicarPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDuplicarPreguntaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDuplicarPreguntaMouseExited(evt);
            }
        });
        btnDuplicarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDuplicarPreguntaActionPerformed(evt);
            }
        });

        btnEliminarPregunta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_borrar_25x25.png"))); // NOI18N
        btnEliminarPregunta.setToolTipText("");
        btnEliminarPregunta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnEliminarPregunta.setContentAreaFilled(false);
        btnEliminarPregunta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminarPregunta.setEnabled(false);
        btnEliminarPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEliminarPreguntaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnEliminarPreguntaMouseExited(evt);
            }
        });
        btnEliminarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPreguntaActionPerformed(evt);
            }
        });

        btnSubirPregunta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_subir_25x25.png"))); // NOI18N
        btnSubirPregunta.setToolTipText("");
        btnSubirPregunta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSubirPregunta.setContentAreaFilled(false);
        btnSubirPregunta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubirPregunta.setEnabled(false);
        btnSubirPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSubirPreguntaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSubirPreguntaMouseExited(evt);
            }
        });
        btnSubirPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubirPreguntaActionPerformed(evt);
            }
        });

        btnBajarPregunta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_bajar_25x25.png"))); // NOI18N
        btnBajarPregunta.setToolTipText("");
        btnBajarPregunta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBajarPregunta.setContentAreaFilled(false);
        btnBajarPregunta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBajarPregunta.setEnabled(false);
        btnBajarPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBajarPreguntaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBajarPreguntaMouseExited(evt);
            }
        });
        btnBajarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBajarPreguntaActionPerformed(evt);
            }
        });

        btnImportarPregunta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_importar_25x25.png"))); // NOI18N
        btnImportarPregunta.setToolTipText("");
        btnImportarPregunta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnImportarPregunta.setContentAreaFilled(false);
        btnImportarPregunta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnImportarPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnImportarPreguntaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnImportarPreguntaMouseExited(evt);
            }
        });
        btnImportarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarPreguntaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPreguntasLayout = new javax.swing.GroupLayout(pnlPreguntas);
        pnlPreguntas.setLayout(pnlPreguntasLayout);
        pnlPreguntasLayout.setHorizontalGroup(
            pnlPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrPreguntas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPreguntasLayout.createSequentialGroup()
                .addComponent(btnNuevaPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDuplicarPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnImportarPregunta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarPregunta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubirPregunta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBajarPregunta))
        );
        pnlPreguntasLayout.setVerticalGroup(
            pnlPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPreguntasLayout.createSequentialGroup()
                .addComponent(scrPreguntas, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNuevaPregunta)
                    .addComponent(btnDuplicarPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarPregunta)
                    .addComponent(btnSubirPregunta)
                    .addComponent(btnBajarPregunta)
                    .addComponent(btnImportarPregunta)))
        );

        pnlPreguntaSeleccionada.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pregunta Seleccionada", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR, new java.awt.Color(102, 102, 102)));
        pnlPreguntaSeleccionada.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        lblTemaPregunta.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblTemaPregunta.setText("Tema:");

        lblEnunciado.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblEnunciado.setText("Enunciado (*): ");

        cmbTipoPregunta.setBackground(new java.awt.Color(255, 204, 102));
        cmbTipoPregunta.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        cmbTipoPregunta.setRenderer(new frontend.auxiliares.CeldaListaRendererEntropy());
        cmbTipoPregunta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pregunta a Desarrollar", "Pregunta de Opciones Múltiples", "Pregunta Verdadero y Falso", "Pregunta Numérica", "Pregunta de Relación de Columnas" }));
        cmbTipoPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTipoPreguntaActionPerformed(evt);
            }
        });

        lblTipoPregunta.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblTipoPregunta.setText("Tipo:");

        lblPuntaje.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblPuntaje.setText("Puntaje:");

        lblComentario.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblComentario.setText("Comentario:");

        lblTags.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblTags.setText("Tags:");

        lblNivel.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblNivel.setText("Nivel:");

        String[] rutas = {
            "/frontend/imagenes/ic_nivel_muy_facil.png",
            "/frontend/imagenes/ic_nivel_facil.png",
            "/frontend/imagenes/ic_nivel_normal.png",
            "/frontend/imagenes/ic_nivel_dificil.png",
            "/frontend/imagenes/ic_nivel_experto.png"};
        cmbNivel.setBackground(new java.awt.Color(255, 204, 102));
        cmbNivel.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        cmbNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Muy Fácil", "Fácil", "Normal", "Difícil", "Experto" }));
        cmbNivel.setRenderer(new frontend.auxiliares.ComboBoxImagenRendererEntropy(rutas));

        scrEnunciado.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txaEnunciado.setTextoPorDefecto("Ingrese Enunciado");
        txaEnunciado.mostrarTextoPorDefecto();
        txaEnunciado.setColumns(20);
        txaEnunciado.setRows(2);
        txaEnunciado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txaEnunciadoFocusLost(evt);
            }
        });
        scrEnunciado.setViewportView(txaEnunciado);

        scrComentario.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrComentario.setToolTipText("");

        txaComentario.setTextoPorDefecto("Ingrese Comentario");
        txaComentario.mostrarTextoPorDefecto();
        txaComentario.setColumns(20);
        txaComentario.setRows(2);
        scrComentario.setViewportView(txaComentario);

        txaTags.setTextoPorDefecto("Ingrese Tags");
        txaTags.mostrarTextoPorDefecto();
        txaTags.setColumns(20);
        txaTags.setRows(2);
        scrTags.setViewportView(txaTags);

        txtPuntaje.setDocument(new FiltroTexto(FiltroTexto.TipoFiltro.NUMEROS_DECIMALES_POSITIVOS));
        txtPuntaje.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPuntajeFocusLost(evt);
            }
        });
        txtPuntaje.setTextoPorDefecto("Ingrese Puntaje");
        txtPuntaje.mostrarTextoPorDefecto();

        cmbTema.setTextoPorDefecto("Ingrese Tema");
        cmbTema.mostrarTextoPorDefecto();

        lblCamposObligatorios.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        lblCamposObligatorios.setText("(*) Campos obligatorios");

        pnlAdjuntos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Adjuntos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR));

        lblRutaAdjunto.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        lblRutaAdjunto.setForeground(new java.awt.Color(102, 102, 102));
        lblRutaAdjunto.setText("Seleccione un archivo a cargar...");

        btnAdjunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_attachment_25x25.png"))); // NOI18N
        btnAdjunto.setToolTipText("");
        btnAdjunto.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAdjunto.setContentAreaFilled(false);
        btnAdjunto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdjuntoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlAdjuntosLayout = new javax.swing.GroupLayout(pnlAdjuntos);
        pnlAdjuntos.setLayout(pnlAdjuntosLayout);
        pnlAdjuntosLayout.setHorizontalGroup(
            pnlAdjuntosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdjuntosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRutaAdjunto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdjunto)
                .addContainerGap())
        );
        pnlAdjuntosLayout.setVerticalGroup(
            pnlAdjuntosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAdjuntosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRutaAdjunto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlAdjuntosLayout.createSequentialGroup()
                .addComponent(btnAdjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlDatosGeneralesPreguntaLayout = new javax.swing.GroupLayout(pnlDatosGeneralesPregunta);
        pnlDatosGeneralesPregunta.setLayout(pnlDatosGeneralesPreguntaLayout);
        pnlDatosGeneralesPreguntaLayout.setHorizontalGroup(
            pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosGeneralesPreguntaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlAdjuntos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlDatosGeneralesPreguntaLayout.createSequentialGroup()
                        .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTemaPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEnunciado)
                            .addComponent(lblPuntaje, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTags, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTipoPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblComentario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlDatosGeneralesPreguntaLayout.createSequentialGroup()
                                .addComponent(txtPuntaje, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbNivel, 0, 148, Short.MAX_VALUE))
                            .addComponent(scrEnunciado, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scrComentario, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbTema, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbTipoPregunta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(scrTags, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDatosGeneralesPreguntaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblCamposObligatorios)))
                .addContainerGap())
        );
        pnlDatosGeneralesPreguntaLayout.setVerticalGroup(
            pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosGeneralesPreguntaLayout.createSequentialGroup()
                .addComponent(lblCamposObligatorios)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrEnunciado, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEnunciado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTemaPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblComentario)
                    .addComponent(scrComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPuntaje)
                        .addComponent(txtPuntaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblNivel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTags, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                    .addComponent(scrTags, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAdjuntos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDatosGeneralesPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTipoPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipoPregunta))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrTipoPregunta.setBorder(null);
        scrTipoPregunta.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout pnlPreguntaSeleccionadaLayout = new javax.swing.GroupLayout(pnlPreguntaSeleccionada);
        pnlPreguntaSeleccionada.setLayout(pnlPreguntaSeleccionadaLayout);
        pnlPreguntaSeleccionadaLayout.setHorizontalGroup(
            pnlPreguntaSeleccionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlDatosGeneralesPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlPreguntaSeleccionadaLayout.createSequentialGroup()
                .addComponent(scrTipoPregunta)
                .addContainerGap())
        );
        pnlPreguntaSeleccionadaLayout.setVerticalGroup(
            pnlPreguntaSeleccionadaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPreguntaSeleccionadaLayout.createSequentialGroup()
                .addComponent(pnlDatosGeneralesPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrTipoPregunta))
        );

        javax.swing.GroupLayout pnlContenidoLayout = new javax.swing.GroupLayout(pnlContenido);
        pnlContenido.setLayout(pnlContenidoLayout);
        pnlContenidoLayout.setHorizontalGroup(
            pnlContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContenidoLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(pnlPreguntas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPreguntaSeleccionada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlContenidoLayout.setVerticalGroup(
            pnlContenidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPreguntaSeleccionada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlPreguntas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        lblAnterior.setBackground(new java.awt.Color(227, 226, 226));
        lblAnterior.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_anterior.png"))); // NOI18N
        lblAnterior.setToolTipText("");
        lblAnterior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAnterior.setOpaque(true);
        lblAnterior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnteriorMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblAnteriorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblAnteriorMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlContenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlContenido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTipoPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTipoPreguntaActionPerformed
        scrTipoPregunta.setViewportView(null);
        switch (cmbTipoPregunta.getSelectedItem().toString()) {
            case "Pregunta Verdadero y Falso":
                pnlPreguntaVerdaderoFalso = new PanelPreguntaVerdaderoFalso();
                pnlPreguntaVerdaderoFalso.setVisible(true);
                scrTipoPregunta.setViewportView(pnlPreguntaVerdaderoFalso);
                break;
            case "Pregunta de Opciones Múltiples":
                pnlPreguntaMuliplesOpciones = new PanelPreguntaMultiplesOpciones();
                pnlPreguntaMuliplesOpciones.setVisible(true);
                scrTipoPregunta.setViewportView(pnlPreguntaMuliplesOpciones);
                break;
            case "Pregunta Numérica":
                pnlPreguntaNumerica = new PanelPreguntaNumerica();
                pnlPreguntaNumerica.setVisible(true);
                scrTipoPregunta.setViewportView(pnlPreguntaNumerica);
                break;
            case "Pregunta de Relación de Columnas":
                pnlPreguntaRelacionColumnas = new PanelPreguntaRelacionDeColumnas();
                pnlPreguntaRelacionColumnas.setVisible(true);
                scrTipoPregunta.setViewportView(pnlPreguntaRelacionColumnas);
        }
    }//GEN-LAST:event_cmbTipoPreguntaActionPerformed

    private void lblAnteriorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnteriorMouseClicked
        mPadre.getPanelDeslizante().setPanelMostrado(mPadre.getPanelCabecera());
    }//GEN-LAST:event_lblAnteriorMouseClicked

    private void btnNuevaPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaPreguntaActionPerformed
        if (!pnlPreguntaSeleccionada.getComponent(0).isEnabled()) {
            habilitarContenedor(pnlPreguntaSeleccionada, true);
        }
        blnAgrega = true;
        defaultLstPreguntas.addElement("Sin enunciado");
        lstPreguntas.setSelectedIndex(defaultLstPreguntas.getSize() - 1);
        intIndexSeleccionado = defaultLstPreguntas.getSize() - 1;
        preguntaSeleccionada = new Pregunta();
        mPadre.getGestorDiseñoExamen().agregarPregunta(preguntaSeleccionada);
        blnAgrega = false;
        txaEnunciado.grabFocus();
    }//GEN-LAST:event_btnNuevaPreguntaActionPerformed

    private void btnNuevaPreguntaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNuevaPreguntaMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Crear nueva pregunta.");
    }//GEN-LAST:event_btnNuevaPreguntaMouseEntered

    private void btnNuevaPreguntaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNuevaPreguntaMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_btnNuevaPreguntaMouseExited

    private void btnDuplicarPreguntaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDuplicarPreguntaMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_btnDuplicarPreguntaMouseExited

    private void btnImportarPreguntaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImportarPreguntaMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_btnImportarPreguntaMouseExited

    private void btnEliminarPreguntaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarPreguntaMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_btnEliminarPreguntaMouseExited

    private void btnSubirPreguntaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubirPreguntaMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_btnSubirPreguntaMouseExited

    private void btnBajarPreguntaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBajarPreguntaMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_btnBajarPreguntaMouseExited

    private void btnDuplicarPreguntaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDuplicarPreguntaMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Duplicar una pregunta.");
    }//GEN-LAST:event_btnDuplicarPreguntaMouseEntered

    private void btnImportarPreguntaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImportarPreguntaMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Importar una nueva pregunta desde una existente en la base de datos.");
    }//GEN-LAST:event_btnImportarPreguntaMouseEntered

    private void btnEliminarPreguntaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarPreguntaMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Eliminar pregunta de la lista.");
    }//GEN-LAST:event_btnEliminarPreguntaMouseEntered

    private void btnSubirPreguntaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubirPreguntaMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Subir pregunta un lugar en la lista. Las preguntas se muestran aleatoriamente al alumno.");
    }//GEN-LAST:event_btnSubirPreguntaMouseEntered

    private void btnBajarPreguntaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBajarPreguntaMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Bajar pregunta un lugar en la lista. Las preguntas se muestran aleatoriamente al alumno.");
    }//GEN-LAST:event_btnBajarPreguntaMouseEntered

    private void lblAnteriorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnteriorMouseExited
        mPadre.getGestorEstados().volverAEstadoImportante();
    }//GEN-LAST:event_lblAnteriorMouseExited

    private void lblAnteriorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnteriorMouseEntered
        mPadre.getGestorEstados().setEstadoInstantaneo("Volver a edición de cabecera de examen.");
    }//GEN-LAST:event_lblAnteriorMouseEntered

    private void btnImportarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarPreguntaActionPerformed
        new DialogImportarPregunta(this, true, this.mPadre.getGestorDiseñoExamen()).setVisible(true);
    }//GEN-LAST:event_btnImportarPreguntaActionPerformed

    public void importarPreguntas(ArrayList<Pregunta> colPreguntas) {
        for (Pregunta p : colPreguntas) {
            mPadre.getGestorDiseñoExamen().agregarPregunta(p);
        }
        recargarLista(0);
        this.lstPreguntas.setSelectedIndex(defaultLstPreguntas.getSize() - 1);
        this.mPadre.getGestorEstados().setNuevoEstadoImportante("Se han importado correctamente las preguntas.", GestorBarrasDeEstado.TipoEstado.OK);
    }

    /**
     * Devuelve el panel padre.
     *
     * @return instancia de PanelDiseño.
     */
    public PanelDiseño getPanelExamenPadre() {
        return this.mPadre;
    }

    private void lstPreguntasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPreguntasValueChanged
        if (!evt.getValueIsAdjusting()) {
            if (lstPreguntas.isSelectionEmpty()) {
                preguntaSeleccionada = null;
                resetearPanelPreguntaSeleccionada();
                habilitarContenedor(pnlPreguntaSeleccionada, false);

                btnDuplicarPregunta.setEnabled(false);
                btnEliminarPregunta.setEnabled(false);
                btnSubirPregunta.setEnabled(false);
                btnBajarPregunta.setEnabled(false);
            } else {
                if (!pnlPreguntaSeleccionada.getComponent(0).isEnabled()) {
                    habilitarContenedor(pnlPreguntaSeleccionada, true);
                }
                if (preguntaSeleccionada != null && !blnRechargingList) {
                    fabricarPregunta(intIndexSeleccionado);
                }
                if (blnAgrega) {
                    resetearPanelPreguntaSeleccionada();
                } else {
                    intIndexSeleccionado = lstPreguntas.getSelectedIndex();
                    preguntaSeleccionada = mPadre.getGestorDiseñoExamen().getPreguntaSeleccionada(intIndexSeleccionado);
                    actualizarPanelPreguntaSeleccionada();
                }

                btnDuplicarPregunta.setEnabled(true);
                btnEliminarPregunta.setEnabled(true);
                if (lstPreguntas.getSelectedIndex() == 0) {
                    btnSubirPregunta.setEnabled(false);
                } else {
                    btnSubirPregunta.setEnabled(true);
                }
                if (lstPreguntas.getSelectedIndex() == (defaultLstPreguntas.getSize() - 1)) {
                    btnBajarPregunta.setEnabled(false);
                } else {
                    btnBajarPregunta.setEnabled(true);
                }
            }
             if(preguntaSeleccionada!=null && preguntaSeleccionada.getColAdjuntos()!=null && preguntaSeleccionada.getColAdjuntos().size()>0)
            {
                this.lblRutaAdjunto.setText("Se ha cargado una imagen");
            }
            else
            {
                this.lblRutaAdjunto.setText("Seleccione un archivo a cargar...");
                
            }
        }
    }//GEN-LAST:event_lstPreguntasValueChanged

    private void btnEliminarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPreguntaActionPerformed
        if (Mensajes.mostrarConfirmacion("¿Realmente desea borrar la pregunta?")) {
            int intIndex = lstPreguntas.getSelectedIndex();
            mPadre.getGestorDiseñoExamen().eliminarPregunta(intIndex);
            defaultLstPreguntas.remove(intIndex);
            lstPreguntas.setSelectedIndex(intIndex - 1);
        }
    }//GEN-LAST:event_btnEliminarPreguntaActionPerformed

    private void btnSubirPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubirPreguntaActionPerformed
        if (preguntaSeleccionada != null) {
            fabricarPregunta(intIndexSeleccionado);
        }
        mPadre.getGestorDiseñoExamen().cambiarOrdenPregunta(lstPreguntas.getSelectedIndex(), lstPreguntas.getSelectedIndex() - 1);
        blnRechargingList = true;
        recargarLista(-1);
        blnRechargingList = false;
    }//GEN-LAST:event_btnSubirPreguntaActionPerformed

    private void btnBajarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBajarPreguntaActionPerformed
        if (preguntaSeleccionada != null) {
            fabricarPregunta(intIndexSeleccionado);
        }
        mPadre.getGestorDiseñoExamen().cambiarOrdenPregunta(lstPreguntas.getSelectedIndex(), lstPreguntas.getSelectedIndex() + 1);
        blnRechargingList = true;
        recargarLista(1);
        blnRechargingList = false;
    }//GEN-LAST:event_btnBajarPreguntaActionPerformed

    private void btnDuplicarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDuplicarPreguntaActionPerformed
        if (preguntaSeleccionada != null) {
            fabricarPregunta(intIndexSeleccionado);
        }
        Pregunta clonada = mPadre.getGestorDiseñoExamen().clonarPregunta(preguntaSeleccionada);
        mPadre.getGestorDiseñoExamen().agregarPregunta(clonada);
        if (clonada.getStrEnunciado() != null && !clonada.getStrEnunciado().equals("")) {
            defaultLstPreguntas.addElement(clonada.getStrEnunciado());
        } else {
            defaultLstPreguntas.addElement("Sin enunciado");
        }
        lstPreguntas.setSelectedIndex(defaultLstPreguntas.getSize());
    }//GEN-LAST:event_btnDuplicarPreguntaActionPerformed

    private void txaEnunciadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txaEnunciadoFocusLost
        //this.fabricarPregunta(0);
        this.fabricarPregunta(intIndexSeleccionado);
    }//GEN-LAST:event_txaEnunciadoFocusLost

    private void txtPuntajeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPuntajeFocusLost
        if (txtPuntaje.getText().endsWith(".")) {
            txtPuntaje.setText(txtPuntaje.getText() + "0");
        }
    }//GEN-LAST:event_txtPuntajeFocusLost

    private void btnAdjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdjuntoActionPerformed
        DialogImportarAdjuntos adjuntos = new DialogImportarAdjuntos(VentanaPrincipal.getInstancia(), true, this);
        adjuntos.setVisible(true);
    }//GEN-LAST:event_btnAdjuntoActionPerformed

    private void keyReleasedCmbTema(KeyEvent evt) {
        if (FiltroTexto.TipoFiltro.DIGITOS_Y_LETRAS.toString().contains(String.valueOf(evt.getKeyChar()))
                || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
            cmbTema.hidePopup();
            Object item = cmbTema.getEditor().getItem();
            cmbTema.removeAllItems();

            for (Tema t : mPadre.getGestorDiseñoExamen().getTemasPorFiltro(item.toString())) {
                cmbTema.addItem(t);
            }

            cmbTema.getEditor().setItem(item);
            if (cmbTema.getItemCount() != 0) {
                cmbTema.showPopup();
            }
        }
    }

    private void recargarLista(int intSumarIndex) {
        int intSelectedIndex = lstPreguntas.getSelectedIndex() + intSumarIndex;

        for (int i = 0; i < mPadre.getGestorDiseñoExamen().getColPreguntas().size(); i++) {
            Pregunta p = mPadre.getGestorDiseñoExamen().getPreguntaSeleccionada(i);

            String strEnunciado = (p.getStrEnunciado() != null && !p.getStrEnunciado().equals("")) ? p.getStrEnunciado() : "Sin enunciado";

            if (i < defaultLstPreguntas.size()) {
                defaultLstPreguntas.setElementAt(strEnunciado, i);
            } else {
                defaultLstPreguntas.addElement(strEnunciado);
            }
        }

        lstPreguntas.setSelectedIndex(intSelectedIndex);
    }

    private void actualizarPanelPreguntaSeleccionada() {
        if (preguntaSeleccionada == null) {
            resetearPanelPreguntaSeleccionada();
            habilitarContenedor(pnlPreguntaSeleccionada, false);
        } else {
            habilitarContenedor(pnlPreguntaSeleccionada, true);

            if (preguntaSeleccionada.getStrEnunciado() != null) {
                txaEnunciado.setText(preguntaSeleccionada.getStrEnunciado());
            } else {
                txaEnunciado.setText("Ingrese Enunciado");
            }

            if (preguntaSeleccionada.getTema() != null) {
                cmbTema.setSelectedItem(preguntaSeleccionada.getTema());
            } else {
                cmbTema.setSelectedIndex(-1);
                cmbTema.getEditor().setItem("Ingrese Tema");
            }

            if (preguntaSeleccionada.getStrReferencia() != null) {
                txaComentario.setText(preguntaSeleccionada.getStrReferencia());
            } else {
                txaComentario.setText("Ingrese Comentario");
            }

            if (preguntaSeleccionada.getDblPuntaje() != 0) {
                txtPuntaje.setText("" + preguntaSeleccionada.getDblPuntaje());
            } else {
                txtPuntaje.setText("Ingrese Puntaje");
            }

            if (preguntaSeleccionada.getStrNivel() != null) {
                for (int i = 0; i < cmbNivel.getItemCount(); i++) {
                    String strNivel = (String) cmbNivel.getItemAt(i);
                    if (strNivel.equals(preguntaSeleccionada.getStrNivel())) {
                        cmbNivel.setSelectedItem(strNivel);
                    }
                }
            }

            if (preguntaSeleccionada.getColTags() != null) {
                StringBuilder strBufferTags = new StringBuilder();
                boolean bandera = false;
                for (String tag : preguntaSeleccionada.getColTags()) {
                    if (bandera) {
                        strBufferTags.append(", ");
                    } else {
                        bandera = true;
                    }

                    strBufferTags.append(tag);
                }
                txaTags.setText(strBufferTags.toString());
            } else {
                txaTags.setText("Ingrese Tags");
            }

            // Tipo Pregunta
            switch (preguntaSeleccionada.getIntTipo()) {
                case TipoPregunta.DESARROLLAR:
                    cmbTipoPregunta.setSelectedItem("Pregunta a Desarrollar");
                    break;

                case TipoPregunta.MULTIPLE_OPCION:
                    cmbTipoPregunta.setSelectedItem("Pregunta de Opciones Múltiples");
                    PreguntaMultipleOpcion preguntaSeleccionadaMO = null;
                    if (preguntaSeleccionada instanceof PreguntaMultipleOpcion) {
                        preguntaSeleccionadaMO = (PreguntaMultipleOpcion) preguntaSeleccionada;
                    }
                    if (preguntaSeleccionadaMO != null) {
                        pnlPreguntaMuliplesOpciones.setOpciones(preguntaSeleccionadaMO.getColOpciones());
                    }
                    break;

                case TipoPregunta.VERDADERO_FALSO:
                    cmbTipoPregunta.setSelectedItem("Pregunta Verdadero y Falso");
                    PreguntaVerdaderoFalso preguntaSeleccionadaVF = null;
                    if (preguntaSeleccionada instanceof PreguntaVerdaderoFalso) {
                        preguntaSeleccionadaVF = (PreguntaVerdaderoFalso) preguntaSeleccionada;
                    }
                    if (preguntaSeleccionadaVF != null) {
                        pnlPreguntaVerdaderoFalso.setRespuestaCorrecta(preguntaSeleccionadaVF.isBlnEsVerdadera());
                        pnlPreguntaVerdaderoFalso.setConJustificacion(preguntaSeleccionadaVF.isBlnConJustificacion());
                    }
                    break;

                case TipoPregunta.NUMERICA:
                    cmbTipoPregunta.setSelectedItem("Pregunta Numérica");
                    PreguntaNumerica preguntaSeleccionadaNU = null;
                    if (preguntaSeleccionada instanceof PreguntaNumerica) {
                        preguntaSeleccionadaNU = (PreguntaNumerica) preguntaSeleccionada;
                    }
                    if (preguntaSeleccionadaNU != null) {
                        pnlPreguntaNumerica.setValores(preguntaSeleccionadaNU.esRango(),
                                preguntaSeleccionadaNU.getDblNumero(),
                                preguntaSeleccionadaNU.getDblRangoDesde(),
                                preguntaSeleccionadaNU.getDblRangoHasta(),
                                preguntaSeleccionadaNU.getDblVariacion());
                    }
                    break;

                case TipoPregunta.RELACION_COLUMNAS:
                    cmbTipoPregunta.setSelectedItem("Pregunta de Relación de Columnas");
                    PreguntaRelacionColumnas preguntaSeleccionadaRC = null;
                    if (preguntaSeleccionada instanceof PreguntaRelacionColumnas) {
                        preguntaSeleccionadaRC = (PreguntaRelacionColumnas) preguntaSeleccionada;
                    }
                    if (preguntaSeleccionadaRC != null) {
                        pnlPreguntaRelacionColumnas.setCombinaciones(preguntaSeleccionadaRC.getColCombinaciones());
                    }
                    break;
            }
        }
    }

    private void resetearPanelPreguntaSeleccionada() {
        txaEnunciado.setText("Ingrese Enunciado");

        cmbTema.removeAllItems();
        for (Tema t : mPadre.getGestorDiseñoExamen().getColTemas()) {
            cmbTema.addItem(t);
        }
        cmbTema.setSelectedIndex(-1);
        cmbTema.getEditor().setItem("Ingrese Tema");

        txaComentario.setText("Ingrese Comentario");
        txtPuntaje.setText("Ingrese Puntaje");
        cmbNivel.setSelectedIndex(0);
        txaTags.setText("Ingrese Tags");
        cmbTipoPregunta.setSelectedIndex(0);
    }

    private void fabricarPregunta(int intIndexSeleccionado) {
        if (!txaEnunciado.getText().isEmpty()) {
            preguntaSeleccionada.setStrEnunciado(txaEnunciado.getText());
        }

        if (cmbTema.getSelectedIndex() == -1) {
            if (!cmbTema.getEditor().getItem().toString().equals("Ingrese Tema") && !cmbTema.getEditor().getItem().toString().isEmpty()) {
                Tema nuevoTema = new Tema(cmbTema.getEditor().getItem().toString());
                boolean esTemaNuevo = true;
                for (Tema t : mPadre.getGestorDiseñoExamen().getColTemas()) {
                    if (t.getStrNombre().toLowerCase().equals(nuevoTema.getStrNombre().toLowerCase())) {
                        esTemaNuevo = false;
                        preguntaSeleccionada.setTema(t);
                        break;
                    }
                }

                if (esTemaNuevo) {
                    mPadre.getGestorDiseñoExamen().agregarTema(nuevoTema);
                    preguntaSeleccionada.setTema(nuevoTema);
                }
            }
        } else {
            preguntaSeleccionada.setTema((Tema) cmbTema.getSelectedItem());
        }

        if (!txaComentario.getText().isEmpty()) {
            preguntaSeleccionada.setStrReferencia(txaComentario.getText());
        }

        double puntaje = 0;
        if (!txtPuntaje.getText().isEmpty()) {
            try {
                puntaje = Double.parseDouble(txtPuntaje.getText());
            } catch (NumberFormatException e) {
                Mensajes.mostrarError("El puntaje no puede ser letras.\nSe establecerá el puntaje en cero.");
            }
        }
        preguntaSeleccionada.setDblPuntaje(puntaje);

        preguntaSeleccionada.setStrNivel(cmbNivel.getSelectedItem().toString());

        ArrayList<String> colTags = new ArrayList<>();
        if (!txaTags.getText().isEmpty()) {
            String[] tags = txaTags.getText().split(",");
            for (String tag : tags) {
                tag = tag.trim();
                colTags.add(tag);
            }
        }
        preguntaSeleccionada.setColTags(colTags);

        switch (cmbTipoPregunta.getSelectedItem().toString()) {
            case "Pregunta a Desarrollar":
                preguntaSeleccionada.setIntTipo(TipoPregunta.DESARROLLAR);
                break;

            case "Pregunta de Opciones Múltiples":
                preguntaSeleccionada.setIntTipo(TipoPregunta.MULTIPLE_OPCION);
                PreguntaMultipleOpcion preguntaSeleccionadaMO = new PreguntaMultipleOpcion(
                        preguntaSeleccionada.getIntPreguntaId(),
                        preguntaSeleccionada.getIntOrden(),
                        preguntaSeleccionada.getStrEnunciado(),
                        preguntaSeleccionada.getIntTipo(),
                        preguntaSeleccionada.getStrNivel(),
                        preguntaSeleccionada.getDblPuntaje(),
                        preguntaSeleccionada.getStrReferencia(),
                        preguntaSeleccionada.getColAdjuntos(),
                        preguntaSeleccionada.getColTags(),
                        preguntaSeleccionada.getTema());
                preguntaSeleccionadaMO.setColOpciones(pnlPreguntaMuliplesOpciones.getOpciones());

                mPadre.getGestorDiseñoExamen().setPreguntaSeleccionada(intIndexSeleccionado, preguntaSeleccionadaMO);
                break;

            case "Pregunta Verdadero y Falso":
                preguntaSeleccionada.setIntTipo(TipoPregunta.VERDADERO_FALSO);
                PreguntaVerdaderoFalso preguntaSeleccionadaVF = new PreguntaVerdaderoFalso(
                        preguntaSeleccionada.getIntPreguntaId(),
                        preguntaSeleccionada.getIntOrden(),
                        preguntaSeleccionada.getStrEnunciado(),
                        preguntaSeleccionada.getIntTipo(),
                        preguntaSeleccionada.getStrNivel(),
                        preguntaSeleccionada.getDblPuntaje(),
                        preguntaSeleccionada.getStrReferencia(),
                        preguntaSeleccionada.getColAdjuntos(),
                        preguntaSeleccionada.getColTags(),
                        preguntaSeleccionada.getTema());
                preguntaSeleccionadaVF.setBlnEsVerdadera(pnlPreguntaVerdaderoFalso.getRespuestaCorrecta());
                preguntaSeleccionadaVF.setBlnConJustificacion(pnlPreguntaVerdaderoFalso.getConJustificacion());

                mPadre.getGestorDiseñoExamen().setPreguntaSeleccionada(intIndexSeleccionado, preguntaSeleccionadaVF);
                break;

            case "Pregunta de Relación de Columnas":
                preguntaSeleccionada.setIntTipo(TipoPregunta.RELACION_COLUMNAS);
                PreguntaRelacionColumnas preguntaSeleccionadaRC = new PreguntaRelacionColumnas(
                        preguntaSeleccionada.getIntPreguntaId(),
                        preguntaSeleccionada.getIntOrden(),
                        preguntaSeleccionada.getStrEnunciado(),
                        preguntaSeleccionada.getIntTipo(),
                        preguntaSeleccionada.getStrNivel(),
                        preguntaSeleccionada.getDblPuntaje(),
                        preguntaSeleccionada.getStrReferencia(),
                        preguntaSeleccionada.getColAdjuntos(),
                        preguntaSeleccionada.getColTags(),
                        preguntaSeleccionada.getTema());
                preguntaSeleccionadaRC.setColCombinaciones(pnlPreguntaRelacionColumnas.getCombinaciones());

                mPadre.getGestorDiseñoExamen().setPreguntaSeleccionada(intIndexSeleccionado, preguntaSeleccionadaRC);
                break;

            case "Pregunta Numérica":
                preguntaSeleccionada.setIntTipo(TipoPregunta.NUMERICA);
                PreguntaNumerica preguntaSeleccionadaNU = new PreguntaNumerica(
                        preguntaSeleccionada.getIntPreguntaId(),
                        preguntaSeleccionada.getIntOrden(),
                        preguntaSeleccionada.getStrEnunciado(),
                        preguntaSeleccionada.getIntTipo(),
                        preguntaSeleccionada.getStrNivel(),
                        preguntaSeleccionada.getDblPuntaje(),
                        preguntaSeleccionada.getStrReferencia(),
                        preguntaSeleccionada.getColAdjuntos(),
                        preguntaSeleccionada.getColTags(),
                        preguntaSeleccionada.getTema());
                preguntaSeleccionadaNU.setBlnEsRango(pnlPreguntaNumerica.getEsRango());
                preguntaSeleccionadaNU.setDblNumero(pnlPreguntaNumerica.getNumero());
                preguntaSeleccionadaNU.setDblRangoDesde(pnlPreguntaNumerica.getRangoDesde());
                preguntaSeleccionadaNU.setDblRangoHasta(pnlPreguntaNumerica.getRangoHasta());
                preguntaSeleccionadaNU.setDblVariacion(pnlPreguntaNumerica.getVariacion());

                mPadre.getGestorDiseñoExamen().setPreguntaSeleccionada(intIndexSeleccionado, preguntaSeleccionadaNU);
        }

        recargarLista(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdjunto;
    private javax.swing.JButton btnBajarPregunta;
    private javax.swing.JButton btnDuplicarPregunta;
    private javax.swing.JButton btnEliminarPregunta;
    private javax.swing.JButton btnImportarPregunta;
    private javax.swing.JButton btnNuevaPregunta;
    private javax.swing.JButton btnSubirPregunta;
    private javax.swing.JComboBox cmbNivel;
    private frontend.auxiliares.ComboBoxEntropy cmbTema;
    private javax.swing.JComboBox cmbTipoPregunta;
    private javax.swing.JLabel lblAnterior;
    private javax.swing.JLabel lblCamposObligatorios;
    private javax.swing.JLabel lblComentario;
    private javax.swing.JLabel lblEnunciado;
    private javax.swing.JLabel lblNivel;
    private javax.swing.JLabel lblPuntaje;
    private javax.swing.JLabel lblRutaAdjunto;
    private javax.swing.JLabel lblTags;
    private javax.swing.JLabel lblTemaPregunta;
    private javax.swing.JLabel lblTipoPregunta;
    private javax.swing.JList lstPreguntas;
    private javax.swing.JPanel pnlAdjuntos;
    private javax.swing.JPanel pnlContenido;
    private javax.swing.JPanel pnlDatosGeneralesPregunta;
    private javax.swing.JPanel pnlPreguntaSeleccionada;
    private javax.swing.JPanel pnlPreguntas;
    private javax.swing.JScrollPane scrComentario;
    private javax.swing.JScrollPane scrEnunciado;
    private javax.swing.JScrollPane scrPreguntas;
    private javax.swing.JScrollPane scrTags;
    private javax.swing.JScrollPane scrTipoPregunta;
    private frontend.auxiliares.TextAreaEntropy txaComentario;
    private frontend.auxiliares.TextAreaEntropy txaEnunciado;
    private frontend.auxiliares.TextAreaEntropy txaTags;
    private frontend.auxiliares.TextFieldEntropy txtPuntaje;
    // End of variables declaration//GEN-END:variables

    /**
     * Habilita o deshabilita recursivamente objetos contenedores.
     *
     * @param contenedorHabilitar contenedor a deshabilitar
     * @param habilitar true = habilitar, false = deshabilitar
     */
    private void habilitarContenedor(Container contenedorHabilitar, boolean habilitar) {
        for (Component componente : contenedorHabilitar.getComponents()) {
            if (componente instanceof Container) {
                this.habilitarContenedor((Container) componente, habilitar);
            }
            componente.setEnabled(habilitar);
        }
    }

    /**
     * Forza la actualización de la lista de preguntas.
     */
    public void actualizarExamen() {
        if (preguntaSeleccionada != null) {
            fabricarPregunta(intIndexSeleccionado);
        }
    }
    
    public Pregunta getPreguntaSeleccionada()
    {
        return this.preguntaSeleccionada;
    }
    
    public JLabel getRutaAdjunto()
    {
        return this.lblRutaAdjunto;
    }

}
