package frontend.red;

import backend.auxiliares.Mensajes;
import backend.gestores.GestorConfiguracion;
import backend.gestores.GestorResolucionExamen;
import backend.gestores.GestorPresentacion;
import backend.red.ParsearRoute;
import backend.red.VariablesRed;
import backend.usuarios.Alumno;
import backend.resoluciones.Resolucion;
import backend.usuarios.Usuario;
import frontend.auxiliares.ComponentMover;
import frontend.auxiliares.ComponentResizer;
import frontend.auxiliares.FiltroTexto;
import frontend.auxiliares.GestorBarrasDeEstado;
import frontend.auxiliares.GestorImagenes;
import frontend.auxiliares.LookAndFeelEntropy;
import frontend.examenes.PanelEspera;
import frontend.inicio.VentanaPrincipal;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.net.ConnectException;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.KeyStroke;

/**
 * Clase que representa la interfaz de conexión al módulo profesor.
 *
 * @author Denise
 */
public class DialogConectarServidor extends javax.swing.JDialog {

    public enum TipoAccion {

        EXAMEN, PRESENTACION
    }

    private final Usuario usuario;
    private static final String IPV4_REGEX = "\\A(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}\\z";
    private final GestorBarrasDeEstado gestorEstados;
    private final VentanaPrincipal mPadre;
    private final TipoAccion accion;
    private GestorResolucionExamen gestorResolucionExamen;
    private GestorPresentacion gestorPresentacion;
    private boolean blnConectando;
    private Resolucion resolucionRecuperar;

    /**
     * Constructor de la clase.
     *
     * @param padre ventana principal de la aplicación.
     * @param modal true si mantiene el foco, false de lo contrario.
     * @param accion instancia de TipoAccion: EXAMEN, PRESENTACION.
     */
    public DialogConectarServidor(VentanaPrincipal padre, boolean modal, TipoAccion accion) {
        super(padre, modal);
        this.mPadre = padre;
        initComponents();
        this.accion = accion;
        this.setLocationRelativeTo(padre);
        this.getRootPane().registerKeyboardAction(new EscapeAction(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_IN_FOCUSED_WINDOW);

        this.gestorEstados = new GestorBarrasDeEstado(lblActualizacionEstado, lblIconoEstado);

        this.blnConectando = false;

        //Fondo translúcido.
        this.pnlEstado.setBackground(new Color(255, 255, 255, 123));
        this.pnlCentral.setBackground(new Color(255, 255, 255, 123));

        //Para que el undecorated dialog pueda moverse y ajustarse en tamaño.
        ComponentMover cm = new ComponentMover(JDialog.class, lblBarraTitulo);
        ComponentResizer cr = new ComponentResizer();
        cr.setSnapSize(new Dimension(10, 10));
        cr.registerComponent(this);

        usuario = GestorConfiguracion.getInstancia().getIDAOUsuarios().getUsuario();
        txtNombre.setText(usuario.getStrNombre() + " " + usuario.getStrApellido());
        txtLegajo.setText(usuario.getStrLegajo());
        txtNombre.setEditable(false);
        txtLegajo.setEditable(false);
    }

    /**
     * Constructor de la clase.
     *
     * @param padre ventana principal de la aplicación.
     * @param modal true si mantiene el foco, false de lo contrario.
     * @param accion instancia de TipoAccion: EXAMEN, PRESENTACION.
     * @param resolucionRecuperar instancia de la resolución a recuperar.
     */
    public DialogConectarServidor(VentanaPrincipal padre, boolean modal, TipoAccion accion, Resolucion resolucionRecuperar) {
        this(padre, modal, accion);
        this.resolucionRecuperar = resolucionRecuperar;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new frontend.auxiliares.PanelConFondo();
        lblBarraTitulo = new javax.swing.JLabel();
        pnlEstado = new javax.swing.JPanel();
        lblActualizacionEstado = new javax.swing.JLabel();
        lblIconoEstado = new javax.swing.JLabel();
        btnCerrar = new javax.swing.JButton();
        pnlCentral = new javax.swing.JPanel();
        PanelDatosAlumno = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblLegajo = new javax.swing.JLabel();
        txtNombre = new frontend.auxiliares.TextFieldEntropy();
        txtLegajo = new frontend.auxiliares.TextFieldEntropy();
        panelDatosServidor = new javax.swing.JPanel();
        lblIPServidor = new javax.swing.JLabel();
        txtIPServidor = new frontend.auxiliares.TextFieldEntropy();
        pnlBoton = new javax.swing.JPanel();
        btnConectar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        pnlFondo.setImagen(GestorImagenes.crearImage("/frontend/imagenes/bg2.jpg"));
        pnlFondo.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        lblBarraTitulo.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        lblBarraTitulo.setForeground(new java.awt.Color(255, 102, 0));
        lblBarraTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBarraTitulo.setText("Nueva conexión");

        lblActualizacionEstado.setFont(new java.awt.Font("Calibri", 2, 12)); // NOI18N
        lblActualizacionEstado.setForeground(new java.awt.Color(102, 102, 102));
        lblActualizacionEstado.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblActualizacionEstado.setText("Acá se escriben estados...");
        lblActualizacionEstado.setAlignmentX(0.5F);
        lblActualizacionEstado.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        lblIconoEstado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblIconoEstado.setText(" ");
        lblIconoEstado.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout pnlEstadoLayout = new javax.swing.GroupLayout(pnlEstado);
        pnlEstado.setLayout(pnlEstadoLayout);
        pnlEstadoLayout.setHorizontalGroup(
            pnlEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEstadoLayout.createSequentialGroup()
                .addComponent(lblActualizacionEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblIconoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlEstadoLayout.setVerticalGroup(
            pnlEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlEstadoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblActualizacionEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIconoEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_mensajes_cerrar_opcion.png"))); // NOI18N
        btnCerrar.setBorder(null);
        btnCerrar.setContentAreaFilled(false);
        btnCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        pnlCentral.setLayout(new java.awt.GridLayout(1, 2));

        PanelDatosAlumno.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de alumno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR, new java.awt.Color(204, 102, 0)));
        PanelDatosAlumno.setOpaque(false);

        lblNombre.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblNombre.setText("Nombre: ");

        lblLegajo.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblLegajo.setText("Legajo:");

        txtNombre.setTextoPorDefecto("Ingrese su nombre...");
        txtNombre.mostrarTextoPorDefecto();

        txtLegajo.setTextoPorDefecto("Ingrese su legajo...");
        txtLegajo.mostrarTextoPorDefecto();

        javax.swing.GroupLayout PanelDatosAlumnoLayout = new javax.swing.GroupLayout(PanelDatosAlumno);
        PanelDatosAlumno.setLayout(PanelDatosAlumnoLayout);
        PanelDatosAlumnoLayout.setHorizontalGroup(
            PanelDatosAlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDatosAlumnoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelDatosAlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblLegajo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelDatosAlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(txtLegajo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        PanelDatosAlumnoLayout.setVerticalGroup(
            PanelDatosAlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDatosAlumnoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelDatosAlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelDatosAlumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLegajo)
                    .addComponent(txtLegajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pnlCentral.add(PanelDatosAlumno);

        panelDatosServidor.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos del profesor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, LookAndFeelEntropy.FUENTE_REGULAR, new java.awt.Color(204, 102, 0)));
        panelDatosServidor.setOpaque(false);

        lblIPServidor.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
        lblIPServidor.setText("IP del Profesor:");

        txtIPServidor.setDocument(new FiltroTexto(FiltroTexto.TipoFiltro.DIGITOS_Y_PUNTO));
        txtIPServidor.setTextoPorDefecto("Ingrese la IP del profesor...");
        txtIPServidor.mostrarTextoPorDefecto();
        txtIPServidor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtIPServidorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtIPServidorMouseExited(evt);
            }
        });

        javax.swing.GroupLayout panelDatosServidorLayout = new javax.swing.GroupLayout(panelDatosServidor);
        panelDatosServidor.setLayout(panelDatosServidorLayout);
        panelDatosServidorLayout.setHorizontalGroup(
            panelDatosServidorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosServidorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblIPServidor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtIPServidor, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelDatosServidorLayout.setVerticalGroup(
            panelDatosServidorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosServidorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosServidorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIPServidor)
                    .addComponent(txtIPServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 60, Short.MAX_VALUE))
        );

        pnlCentral.add(panelDatosServidor);

        pnlBoton.setLayout(new java.awt.GridLayout(1, 0));

        btnConectar.setBackground(new java.awt.Color(255, 153, 51));
        btnConectar.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        btnConectar.setForeground(new java.awt.Color(255, 255, 255));
        btnConectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_conectar_50px.png"))); // NOI18N
        btnConectar.setText("<html>Conectar</html>");
        btnConectar.setContentAreaFilled(false);
        btnConectar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConectar.setFocusPainted(false);
        btnConectar.setIconTextGap(10);
        btnConectar.setOpaque(true);
        btnConectar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_conectar_60px.png"))); // NOI18N
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });
        pnlBoton.add(btnConectar);

        javax.swing.GroupLayout pnlFondoLayout = new javax.swing.GroupLayout(pnlFondo);
        pnlFondo.setLayout(pnlFondoLayout);
        pnlFondoLayout.setHorizontalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCentral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlFondoLayout.createSequentialGroup()
                        .addComponent(lblBarraTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCerrar))
                    .addComponent(pnlBoton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlFondoLayout.setVerticalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBarraTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCentral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBoton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        if (blnConectando) {
            return;
        }
        if (gestorResolucionExamen != null && gestorResolucionExamen.estaConectado()) {
            try {
                gestorResolucionExamen.avisarServidorCierre();
            } catch (Exception e) {
                System.err.println("ERROR al cerrar conexión: " + e.getMessage());
            }
        }
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed
        if (!blnConectando) {
            if (validarCampos()) {
                try {
                    Thread hiloConectar = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                blnConectando = true;
                                btnConectar.setText("Intentando conectar...");

                                String strIPServidor = txtIPServidor.getText();
                                String strIPCliente = ParsearRoute.getInstance().getLocalIPAddress();

                                Alumno alumno = new Alumno(usuario.getStrNombre(), 
                                        usuario.getStrApellido(), 
                                        usuario.getStrTipoDocumento(), 
                                        usuario.getIntNroDocumento(), 
                                        usuario.getStrEmail(),
                                        usuario.getStrLegajo(),
                                        usuario.getStrDescripcion(),
                                        usuario.getImgFoto(),
                                        strIPCliente);

                                if (accion == DialogConectarServidor.TipoAccion.EXAMEN) {
                                    if (resolucionRecuperar == null) {
                                        try {
                                            gestorResolucionExamen = new GestorResolucionExamen(strIPServidor, VariablesRed.puertoTCP);
                                        } catch (Exception ex) {
                                          //  Logger.getLogger(DialogConectarServidor.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    } else {
                                        gestorResolucionExamen = new GestorResolucionExamen(strIPServidor, VariablesRed.puertoTCP, resolucionRecuperar);
                                    }
                                    
                                    gestorResolucionExamen.conectarAlumno(alumno);
                                    gestorResolucionExamen.setmPadre(mPadre);

                                    gestorEstados.setNuevoEstadoImportante("Conexión exitosa.", GestorBarrasDeEstado.TipoEstado.OK);

                                    repaint();
                                    mPadre.ocultarMenu();
                                    PanelEspera pnlNuevoExamen = new PanelEspera(mPadre);
                                    pnlNuevoExamen.setName("Toma Examen");
                                    mPadre.getPanelDeslizante().setPanelMostrado(pnlNuevoExamen);
                                    mPadre.setTitle("Toma de examen");
                                    if (!mPadre.isMaximized()) {
                                        mPadre.pack();
                                    }
                                    dispose();
                                } else {
                                    gestorPresentacion = new GestorPresentacion(strIPServidor, VariablesRed.puertoTCP);
                                    gestorPresentacion.conectarAlumno(alumno);
                                    gestorPresentacion.setmPadre(mPadre);
                                    gestorEstados.setNuevoEstadoImportante("Conexión exitosa.", GestorBarrasDeEstado.TipoEstado.OK);
                                    repaint();
                                    mPadre.ocultarMenu();
                                    PanelEspera pnlNuevaPresentacion = new PanelEspera(mPadre);
                                    pnlNuevaPresentacion.setName("Presentacion");
                                    mPadre.getPanelDeslizante().setPanelMostrado(pnlNuevaPresentacion);
                                    mPadre.setTitle("Presentacion");
                                    if (!mPadre.isMaximized()) {
                                       mPadre.pack();
                                    }
                                    dispose();
                                }

                            } catch (Exception ex) {
                                //Logger.getLogger(DialogConectarServidor.class.getName()).log(Level.SEVERE, null, ex);
                                String error = "Error al conectar.";
                                if (ex instanceof ConnectException) {
                                    error = "Tiempo excedido. Imposible hallar la máquina Entropy Profesor.";
                                }
                                gestorEstados.setNuevoEstadoImportante(error, GestorBarrasDeEstado.TipoEstado.ADVERTENCIA);
                                blnConectando = false;
                            }
                            btnConectar.setText("Conectar");
                            repaint();
                            try {
                                this.finalize();
                            } catch (Throwable ex) {
                               // Logger.getLogger(DialogConectarServidor.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                    hiloConectar.start();
                } catch (Exception ex) {
                    this.gestorEstados.setNuevoEstadoImportante("Error al conectar.", GestorBarrasDeEstado.TipoEstado.ADVERTENCIA);
                }
            } else {
                this.gestorEstados.setNuevoEstadoImportante("Campos incorrectos.", GestorBarrasDeEstado.TipoEstado.ADVERTENCIA);
            }
        }
    }//GEN-LAST:event_btnConectarActionPerformed

    private void txtIPServidorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIPServidorMouseEntered
        this.gestorEstados.setEstadoInstantaneo("Una IP tiene el formato x.x.x.x, con x entre 0 y 255.");
        repaint();
    }//GEN-LAST:event_txtIPServidorMouseEntered

    private void txtIPServidorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIPServidorMouseExited
        this.gestorEstados.volverAEstadoImportante();
        repaint();
    }//GEN-LAST:event_txtIPServidorMouseExited

    public GestorBarrasDeEstado getGestorEstados() {
        return gestorEstados;
    }

    private boolean validarCampos() {
        if (txtIPServidor.getText().trim().isEmpty() && txtNombre.getText().trim().isEmpty() && txtLegajo.getText().trim().isEmpty()) {
            Mensajes.mostrarError("Debe ingresar un nombre, legajo e IP.");
            return false;
        }
        if (!txtIPServidor.getText().trim().matches(IPV4_REGEX)) {
            Mensajes.mostrarError("Formato de IP inválido.");
            return false;
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelDatosAlumno;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnConectar;
    private javax.swing.JLabel lblActualizacionEstado;
    private javax.swing.JLabel lblBarraTitulo;
    private javax.swing.JLabel lblIPServidor;
    private javax.swing.JLabel lblIconoEstado;
    private javax.swing.JLabel lblLegajo;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JPanel panelDatosServidor;
    private javax.swing.JPanel pnlBoton;
    private javax.swing.JPanel pnlCentral;
    private javax.swing.JPanel pnlEstado;
    private frontend.auxiliares.PanelConFondo pnlFondo;
    private frontend.auxiliares.TextFieldEntropy txtIPServidor;
    private frontend.auxiliares.TextFieldEntropy txtLegajo;
    private frontend.auxiliares.TextFieldEntropy txtNombre;
    // End of variables declaration//GEN-END:variables

    /**
     * Clase que escucha por el tecleo de la tecla Esc.
     */
    private class EscapeAction implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            dispose();
        }
    }
}
