package frontend.examenes;

import frontend.auxiliares.IIdentificadorCambios;
import backend.auxiliares.Mensajes;
import backend.gestores.GestorResolucionExamen;
import backend.gestores.GestorSeguridad;
import backend.resoluciones.Respuesta;
import backend.resoluciones.RespuestaDesarrollo;
import backend.resoluciones.RespuestaPreguntaMultipleOpcion;
import backend.resoluciones.RespuestaPreguntaNumerica;
import backend.resoluciones.RespuestaPreguntaRelacionColumnas;
import backend.resoluciones.RespuestaPreguntaVerdaderoFalso;
import frontend.auxiliares.LookAndFeelEntropy;
import frontend.inicio.VentanaPrincipal;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.Timer;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

/**
 * Clase que representa al panel donde se muestran las preguntas.
 *
 * @author Denise
 */
public class PanelPregunta extends javax.swing.JPanel {

    private final GestorResolucionExamen gestor;
    private final JLabel[] colCasillas;
    private final JPanel[] colPaneles;
    private final VentanaPrincipal frmPadre;
    private IIdentificadorCambios pnlPreguntaSeleccionada;
    private CuentaRegresiva tmrTemporizador;
    private int intIDSeleccionada;
    private final boolean blnEsCorrecion;
    private DialogAdjunto dlgAdjunto;

    /**
     * Constructor de la clase.
     *
     * @param frmPadre
     * @param gestor gestor de la toma de exámenes que maneja el proceso.
     */
    public PanelPregunta(VentanaPrincipal frmPadre, GestorResolucionExamen gestor) {
        initComponents();
        this.frmPadre = frmPadre;
        this.gestor = gestor;
        this.blnEsCorrecion = false;
        this.colCasillas = crearCasillasPreguntas(gestor.getRespuestas().size());
        this.colPaneles = crearPanelesRespuestas();
        this.cargarPanelPreguntaSeleccionada(0);
        colCasillas[0].setPreferredSize(new Dimension(26, 26));
        colCasillas[0].setMaximumSize(new Dimension(26, 26));
        colCasillas[0].setMinimumSize(new Dimension(26, 26));
        colCasillas[0].setBorder(LookAndFeelEntropy.BORDE_NARANJA);
        colCasillas[0].setBackground(new Color(255, 204, 102));
        pnlCasillas.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                cargarCasillasPreguntas();
            }
        });
        this.addAncestorListener(new AncestorListener() {
            @Override
            public void ancestorAdded(AncestorEvent event) {
                tmrTemporizador = new CuentaRegresiva(); 
           }

            @Override
            public void ancestorRemoved(AncestorEvent event) {
            }

            @Override
            public void ancestorMoved(AncestorEvent event) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTiempo = new javax.swing.JLabel();
        pnlCasillas = new javax.swing.JPanel();
        pnlFila1 = new javax.swing.JPanel();
        lblCasillaTemplate = new javax.swing.JLabel();
        btnTerminar = new javax.swing.JButton();
        pnlCentral = new javax.swing.JPanel();
        lblAnterior = new javax.swing.JLabel();
        pnlAuxiliar = new javax.swing.JPanel();
        pnlPregunta = new javax.swing.JPanel();
        pnlEnunciado = new javax.swing.JPanel();
        lblEnunciado = new javax.swing.JLabel();
        lblsTema = new javax.swing.JLabel();
        lblTema = new javax.swing.JLabel();
        lblsComentarios = new javax.swing.JLabel();
        lblComentarios = new javax.swing.JLabel();
        btnVerAdjunto = new javax.swing.JButton();
        pnlContenidoPregunta = new javax.swing.JPanel();
        lblSiguiente = new javax.swing.JLabel();

        lblTiempo.setBackground(new java.awt.Color(255, 255, 204));
        lblTiempo.setFont(new java.awt.Font("DejaVu Sans", 3, 12)); // NOI18N
        lblTiempo.setForeground(new java.awt.Color(204, 102, 0));
        lblTiempo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTiempo.setText("Hora");

        pnlCasillas.setOpaque(false);
        pnlCasillas.setLayout(new javax.swing.BoxLayout(pnlCasillas, javax.swing.BoxLayout.Y_AXIS));

        pnlFila1.setName("Fila1"); // NOI18N
        pnlFila1.setOpaque(false);
        pnlFila1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblCasillaTemplate.setBackground(new java.awt.Color(255, 204, 102));
        lblCasillaTemplate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCasillaTemplate.setText("1");
        lblCasillaTemplate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCasillaTemplate.setMaximumSize(new java.awt.Dimension(25, 25));
        lblCasillaTemplate.setMinimumSize(new java.awt.Dimension(25, 25));
        lblCasillaTemplate.setOpaque(true);
        lblCasillaTemplate.setPreferredSize(new java.awt.Dimension(25, 25));
        pnlFila1.add(lblCasillaTemplate);

        pnlCasillas.add(pnlFila1);

        btnTerminar.setBackground(new java.awt.Color(255, 204, 102));
        btnTerminar.setFont(LookAndFeelEntropy.FUENTE_TITULO);
        btnTerminar.setForeground(new java.awt.Color(255, 255, 255));
        btnTerminar.setText("Listo");
        btnTerminar.setContentAreaFilled(false);
        btnTerminar.setMaximumSize(new java.awt.Dimension(100, 27));
        btnTerminar.setMinimumSize(new java.awt.Dimension(100, 27));
        btnTerminar.setOpaque(true);
        btnTerminar.setPreferredSize(new java.awt.Dimension(100, 27));
        btnTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTerminarActionPerformed(evt);
            }
        });

        pnlCentral.setOpaque(false);
        pnlCentral.setLayout(new javax.swing.BoxLayout(pnlCentral, javax.swing.BoxLayout.LINE_AXIS));

        lblAnterior.setBackground(new java.awt.Color(227, 226, 226));
        lblAnterior.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_anterior.png"))); // NOI18N
        lblAnterior.setToolTipText("");
        lblAnterior.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAnterior.setMaximumSize(new java.awt.Dimension(30, 32767));
        lblAnterior.setOpaque(true);
        lblAnterior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnteriorMouseClicked(evt);
            }
        });
        pnlCentral.add(lblAnterior);

        pnlAuxiliar.setOpaque(false);

        pnlPregunta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));
        pnlPregunta.setOpaque(false);

        pnlEnunciado.setOpaque(false);

        lblEnunciado.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        lblEnunciado.setText("1. ¿Qué le pasa al papagayo en celo?");
        lblEnunciado.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        lblsTema.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        lblsTema.setText("Tema:");

        lblTema.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        lblTema.setText("Unidad 1");

        lblsComentarios.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        lblsComentarios.setText("Comentarios:");
        lblsComentarios.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        lblComentarios.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        lblComentarios.setText("No tengo comentarios.");
        lblComentarios.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        btnVerAdjunto.setFont(LookAndFeelEntropy.FUENTE_CURSIVA);
        btnVerAdjunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_attachment_25x25.png"))); // NOI18N
        btnVerAdjunto.setText("Ver adjunto");
        btnVerAdjunto.setToolTipText("");
        btnVerAdjunto.setBorder(null);
        btnVerAdjunto.setBorderPainted(false);
        btnVerAdjunto.setContentAreaFilled(false);
        btnVerAdjunto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVerAdjunto.setFocusPainted(false);
        btnVerAdjunto.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnVerAdjunto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnVerAdjuntoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnVerAdjuntoMouseExited(evt);
            }
        });
        btnVerAdjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerAdjuntoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlEnunciadoLayout = new javax.swing.GroupLayout(pnlEnunciado);
        pnlEnunciado.setLayout(pnlEnunciadoLayout);
        pnlEnunciadoLayout.setHorizontalGroup(
            pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEnunciadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEnunciadoLayout.createSequentialGroup()
                        .addComponent(lblEnunciado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnVerAdjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEnunciadoLayout.createSequentialGroup()
                        .addGroup(pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblsComentarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblsTema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEnunciadoLayout.createSequentialGroup()
                                .addComponent(lblTema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(63, 63, 63))
                            .addComponent(lblComentarios, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlEnunciadoLayout.setVerticalGroup(
            pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEnunciadoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnunciado, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                    .addComponent(btnVerAdjunto, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblsTema)
                    .addComponent(lblTema))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEnunciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblsComentarios, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(lblComentarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pnlContenidoPregunta.setOpaque(false);
        pnlContenidoPregunta.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout pnlPreguntaLayout = new javax.swing.GroupLayout(pnlPregunta);
        pnlPregunta.setLayout(pnlPreguntaLayout);
        pnlPreguntaLayout.setHorizontalGroup(
            pnlPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pnlPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPreguntaLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(pnlPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlEnunciado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlContenidoPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        pnlPreguntaLayout.setVerticalGroup(
            pnlPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
            .addGroup(pnlPreguntaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlPreguntaLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlEnunciado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(pnlContenidoPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout pnlAuxiliarLayout = new javax.swing.GroupLayout(pnlAuxiliar);
        pnlAuxiliar.setLayout(pnlAuxiliarLayout);
        pnlAuxiliarLayout.setHorizontalGroup(
            pnlAuxiliarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAuxiliarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlAuxiliarLayout.setVerticalGroup(
            pnlAuxiliarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnlCentral.add(pnlAuxiliar);

        lblSiguiente.setBackground(new java.awt.Color(227, 226, 226));
        lblSiguiente.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frontend/imagenes/ic_siguiente.png"))); // NOI18N
        lblSiguiente.setToolTipText("");
        lblSiguiente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblSiguiente.setMaximumSize(new java.awt.Dimension(30, 32767));
        lblSiguiente.setOpaque(true);
        lblSiguiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblSiguienteMouseClicked(evt);
            }
        });
        pnlCentral.add(lblSiguiente);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCentral, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pnlCasillas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTerminar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTiempo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCentral, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlCasillas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTerminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTerminarActionPerformed
        try {
            // Notificamos progreso.
            int intTotalPreguntas = gestor.getRespuestas().size();
            int intPreguntasRespondidas = intTotalPreguntas;
            for (JLabel lblCasilla : colCasillas) {
                if (lblCasilla.getBackground().equals(Color.LIGHT_GRAY)) {
                    intPreguntasRespondidas--;
                }
            }
            if (!pnlPreguntaSeleccionada.seModifico()) {
                intPreguntasRespondidas--;
            }
            if (intPreguntasRespondidas < 0) {
                intPreguntasRespondidas = 0;
            }
            gestor.notificarProgreso(intPreguntasRespondidas);

            this.frmPadre.setAlwaysOnTop(false);
            
            String strAdvertencia = "Está a punto de enviar el examen para su corrección.";
            if (intPreguntasRespondidas < intTotalPreguntas) {
                strAdvertencia = " Quedan " + (intTotalPreguntas - intPreguntasRespondidas) + " preguntas sin responder.";
            }
            strAdvertencia += " ¿Está seguro que desea continuar?";

            if (Mensajes.mostrarConfirmacion(strAdvertencia)) {
                //Desactivo la seguridad en este punto, ademas de que esto desactivada en los eventos Closing y Closed del dialog.
                //this.desabilitarSeguridad();   //Activar esto cando se active la seguridad.
                this.gestor.finalizarExamen();
                //this.gestor.cerrarSocketDeConexion();

            } else {
                //Activar para activar la Seguridad.
                //this.frmPadre.setAlwaysOnTop(true);
            }
        } catch (IOException ioe) {
            Mensajes.mostrarError("Imposible notificar al profesor de la finalización.");
        }
    }//GEN-LAST:event_btnTerminarActionPerformed

    private void lblAnteriorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnteriorMouseClicked
        cargarPreguntaSeleccionada(intIDSeleccionada - 1);
    }//GEN-LAST:event_lblAnteriorMouseClicked

    private void lblSiguienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblSiguienteMouseClicked
        cargarPreguntaSeleccionada(intIDSeleccionada + 1);
    }//GEN-LAST:event_lblSiguienteMouseClicked

    private void btnVerAdjuntoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVerAdjuntoMouseEntered
        btnVerAdjunto.setText("<html><u>Ver adjunto</u></html>");
    }//GEN-LAST:event_btnVerAdjuntoMouseEntered

    private void btnVerAdjuntoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVerAdjuntoMouseExited
        btnVerAdjunto.setText("<html>Ver adjunto</html>");
    }//GEN-LAST:event_btnVerAdjuntoMouseExited

    private void btnVerAdjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerAdjuntoActionPerformed
        gestor.dialogRealizarExamen.setAlwaysOnTop(false);
        dlgAdjunto.setAlwaysOnTop(true);
        dlgAdjunto.setVisible(true);        
    }//GEN-LAST:event_btnVerAdjuntoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTerminar;
    private javax.swing.JButton btnVerAdjunto;
    private javax.swing.JLabel lblAnterior;
    private javax.swing.JLabel lblCasillaTemplate;
    private javax.swing.JLabel lblComentarios;
    private javax.swing.JLabel lblEnunciado;
    private javax.swing.JLabel lblSiguiente;
    private javax.swing.JLabel lblTema;
    private javax.swing.JLabel lblTiempo;
    private javax.swing.JLabel lblsComentarios;
    private javax.swing.JLabel lblsTema;
    private javax.swing.JPanel pnlAuxiliar;
    private javax.swing.JPanel pnlCasillas;
    private javax.swing.JPanel pnlCentral;
    private javax.swing.JPanel pnlContenidoPregunta;
    private javax.swing.JPanel pnlEnunciado;
    private javax.swing.JPanel pnlFila1;
    private javax.swing.JPanel pnlPregunta;
    // End of variables declaration//GEN-END:variables

    /**
     * Crea los labels de la parte inferior de la pantalla.
     *
     * @param cantPreguntas cantidad de preguntas a responder.
     * @return la colección de labels.
     */
    private JLabel[] crearCasillasPreguntas(int cantPreguntas) {

        JLabel[] colCasillas = new JLabel[cantPreguntas];

        for (int i = 0; i < cantPreguntas; i++) {
            JLabel lbl = new JLabel();
            lbl.setPreferredSize(new Dimension(21, 21));
            lbl.setMaximumSize(new Dimension(21, 21));
            lbl.setMinimumSize(new Dimension(21, 21));
            lbl.setFont(LookAndFeelEntropy.FUENTE_REGULAR);
            lbl.setCursor(new Cursor(Cursor.HAND_CURSOR));
            lbl.setBackground(Color.LIGHT_GRAY);
            lbl.setText("" + (i + 1));
            lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl.setOpaque(true);
            lbl.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    lblCasillaMouseClicked(e);
                }
            });
            colCasillas[i] = lbl;
        }

        return colCasillas;
    }

    /**
     * Para la colección de labels actual, las acomoda en un panel del ancho
     * correcto.
     */
    private void cargarCasillasPreguntas() {
        int cantPreguntas = colCasillas.length;

        int anchoDeseado = pnlCasillas.getSize().width;
        if (anchoDeseado == 0) {
            anchoDeseado = pnlCasillas.getPreferredSize().width;
        }

        int cantFilas = (int) Math.ceil(((cantPreguntas * 32) / (double) anchoDeseado));

        pnlCasillas.removeAll();

        HashMap<Integer, JPanel> colFilas = new HashMap<>();

        for (int i = 1; i <= cantFilas; i++) {
            JPanel pnlNuevaFila = new JPanel();
            pnlNuevaFila.setLayout(new FlowLayout(FlowLayout.LEFT));
            colFilas.put(i, pnlNuevaFila);
            pnlCasillas.add(pnlNuevaFila);
        }

        int ancho = 0;
        int fila = 1;
        for (JLabel lbl : colCasillas) {
            ancho += (6 + lbl.getPreferredSize().width);
            if (ancho > anchoDeseado) {
                fila++;
                ancho = 0;
            }
            try {
                colFilas.get(fila).add(lbl);
            } catch (Exception e) {
                System.err.println("No existe la fila " + fila);
            }
        }

        pnlCasillas.revalidate();
        pnlCasillas.repaint();

    }

    /**
     * Se llama cuando el usuario presiona alguna de las casillas apra moverse
     * hacia otra pregunta.
     *
     * @param evt MouseEvent que originó la acción.
     */
    private void lblCasillaMouseClicked(MouseEvent evt) {
        cargarPreguntaSeleccionada(Integer.valueOf(((JLabel) evt.getSource()).getText()) - 1);
    }

    /**
     * Maneja la transición entre la pregunta anteriormente seleccionada y la
     * próxima.
     *
     * @param intIDPregunta id de la nueva pregunta a seleccionar, siendo este
     * id el orden de la pregunta en el vector o lista que la contiene.
     */
    private void cargarPreguntaSeleccionada(int intIDPregunta) {

        // Procesamos la casilla vieja.
        colCasillas[intIDSeleccionada].setPreferredSize(new Dimension(21, 21));
        colCasillas[intIDSeleccionada].setMaximumSize(new Dimension(21, 21));
        colCasillas[intIDSeleccionada].setMinimumSize(new Dimension(21, 21));
        colCasillas[intIDSeleccionada].setBorder(null);
        if (!pnlPreguntaSeleccionada.seModifico()) {
            colCasillas[intIDSeleccionada].setBackground(Color.LIGHT_GRAY);
        }

        // Procesamos la casilla nueva.
        JLabel lblSeleccionada = colCasillas[intIDPregunta];
        lblSeleccionada.setPreferredSize(new Dimension(26, 26));
        lblSeleccionada.setMaximumSize(new Dimension(26, 26));
        lblSeleccionada.setMinimumSize(new Dimension(26, 26));
        lblSeleccionada.setBorder(LookAndFeelEntropy.BORDE_NARANJA);
        lblSeleccionada.setBackground(new Color(255, 204, 102));
        cargarPanelPreguntaSeleccionada(intIDPregunta);

        // Notificamos progreso.
        int intPreguntasRespondidas = gestor.getRespuestas().size();
        for (JLabel lblCasilla : colCasillas) {
            if (lblCasilla.getBackground().equals(Color.LIGHT_GRAY)) {
                intPreguntasRespondidas--;
            }
        }
        if (!pnlPreguntaSeleccionada.seModifico()) {
            intPreguntasRespondidas--;
        }
        gestor.notificarProgreso(intPreguntasRespondidas);

        // Guardamos cambios.
        gestor.guardarCambiosADisco();
    }

    /**
     * Inicializa un vector de paneles para cada respuesta que deba proveer el
     * alumno. Así se evita la nueva aleatorización de ítemes en los elementos
     * de cada panel.
     *
     * @return un vector de paneles.
     */
    private JPanel[] crearPanelesRespuestas() {

        JPanel[] colPaneles = new JPanel[gestor.getRespuestas().size()];

        for (int i = 0; i < colPaneles.length; i++) {

            Respuesta respuesta = gestor.getRespuestas().get(i);

            JPanel pnl = null;

            if (respuesta instanceof RespuestaPreguntaMultipleOpcion) {

                RespuestaPreguntaMultipleOpcion rmo = (RespuestaPreguntaMultipleOpcion) respuesta;
                pnl = new PanelPreguntaMultiplesOpciones(rmo, false);

            } else if (respuesta instanceof RespuestaPreguntaNumerica) {

                RespuestaPreguntaNumerica rmo = (RespuestaPreguntaNumerica) respuesta;
                pnl = new PanelPreguntaNumerica(rmo, false);

            } else if (respuesta instanceof RespuestaPreguntaRelacionColumnas) {

                RespuestaPreguntaRelacionColumnas rmo = (RespuestaPreguntaRelacionColumnas) respuesta;
                pnl = new PanelPreguntaRelacionColumnas(rmo, false);

            } else if (respuesta instanceof RespuestaPreguntaVerdaderoFalso) {

                RespuestaPreguntaVerdaderoFalso rmo = (RespuestaPreguntaVerdaderoFalso) respuesta;
                pnl = new PanelPreguntaVerdaderoFalso(rmo, false);

            } else if (respuesta instanceof RespuestaDesarrollo) {

                RespuestaDesarrollo rmo = (RespuestaDesarrollo) respuesta;
                pnl = new PanelPreguntaDesarrollar(rmo, false);

            }

            colPaneles[i] = pnl;
        }

        return colPaneles;
    }

    /**
     * Carga en el panel de pregunta una nueva pregunta a mostrar.
     *
     * @param idRespuesta id de la respuesta cuya pregunta debe ser completada.
     */
    private void cargarPanelPreguntaSeleccionada(int idRespuesta) {

        limpiarEnunciado();

        this.intIDSeleccionada = idRespuesta;

        lblSiguiente.setVisible(true);
        lblAnterior.setVisible(true);

        if (colCasillas.length == 1) {
            lblAnterior.setVisible(false);
            lblSiguiente.setVisible(false);
        } else if (intIDSeleccionada == 0) {
            lblAnterior.setVisible(false);
        } else if (intIDSeleccionada == colCasillas.length - 1) {
            lblSiguiente.setVisible(false);
        }

        JPanel pnl = colPaneles[idRespuesta];

        Respuesta respuesta = gestor.getRespuestas().get(idRespuesta);

        lblEnunciado.setText("<html>" + respuesta.getPregunta().getStrEnunciado() + "<br></html>");

        btnVerAdjunto.setVisible(!respuesta.getPregunta().getColAdjuntos().isEmpty());
        if(!respuesta.getPregunta().getColAdjuntos().isEmpty()){
            dlgAdjunto = new DialogAdjunto(VentanaPrincipal.getInstancia(), true, respuesta.getPregunta().getColAdjuntos().get(0), gestor);
        }        
        
        if (blnEsCorrecion && respuesta.getPregunta().getStrReferencia() != null) {
            lblComentarios.setText("<html>" + respuesta.getPregunta().getStrReferencia() + "</html>");
            lblComentarios.setVisible(true);
            lblsComentarios.setVisible(true);
        }

        if (blnEsCorrecion && respuesta.getPregunta().getTema() != null) {
            lblTema.setText("<html>" + respuesta.getPregunta().getTema().getStrNombre() + "</html>");
            lblTema.setVisible(true);
            lblsTema.setVisible(true);
        }

        if (pnl != null && pnl instanceof IIdentificadorCambios) {
            pnlPreguntaSeleccionada = (IIdentificadorCambios) pnl;
        }

        if (pnl != null) {
            pnl.setOpaque(false);
        }

        this.pnlContenidoPregunta.removeAll();
        this.pnlContenidoPregunta.add(pnl);
        this.revalidate();
        this.repaint();
    }

    /**
     * Borra los datos básicos de una pregunta: enunciado, comentario y tema.
     */
    private void limpiarEnunciado() {
        lblEnunciado.setText("");
        lblsComentarios.setVisible(false);
        lblComentarios.setVisible(false);
        lblComentarios.setText("");
        lblsTema.setVisible(false);
        lblTema.setVisible(false);
        lblTema.setText("");
    }
    
    public void agregarTiempo(int intMinutosAgregados) {
        this.tmrTemporizador.agregarTiempo(intMinutosAgregados);
    }
    
    public void quitarTiempo(int intMinutosQuitados) {
        this.tmrTemporizador.quitarTiempo(intMinutosQuitados);
    }
    
    public void pararReloj() {
        this.tmrTemporizador.pararReloj();
    }

    /**
     * Clase que se encarga de manejar el timer de cuenta regresiva.
     */
    private class CuentaRegresiva implements ActionListener {

        private boolean blnCaducado;
        private final Timer tmrTemporizador;
        private final String strTituloInicial;
        private int minutos;
        private int segundos;

        public CuentaRegresiva() {
            this.tmrTemporizador = new Timer(1000, this);
            blnCaducado = false;
            minutos = gestor.getExamen().getIntTiempo();
            segundos = 0;
            strTituloInicial = "Examen iniciado: " + gestor.getExamen().getStrNombre();
            lblTiempo.setText(strTituloInicial + " - Tiempo restante: "
                    + String.format("%02d", (int) minutos / 60) + ":"
                    + String.format("%02d", minutos % 60) + ":"
                    + String.format("%02d", segundos));
            tmrTemporizador.start();
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (e.getSource() == tmrTemporizador) {

                    if (segundos == 0) {
                        segundos = 59;
                        minutos--;
                    }

                    segundos--;

                    gestor.setMinutosTranscurridos(gestor.getExamen().getIntTiempo() - minutos);

                    lblTiempo.setText(strTituloInicial + " - Tiempo restante: "
                            + String.format("%02d", (int) minutos / 60) + ":"
                            + String.format("%02d", minutos % 60) + ":"
                            + String.format("%02d", segundos));

                    if (minutos == 10 && segundos == 0) {
                        tmrTemporizador.stop();
                        Mensajes.mostrarAdvertencia("¡Restan 10 minutos de examen!");
                        tmrTemporizador.start();
                    }

                    if (segundos == 0 && minutos == 0) {
                        try {
                            tmrTemporizador.stop();
                            blnCaducado = true;
                            Mensajes.mostrarAdvertencia("¡Ha terminado el tiempo del examen! Se enviarán las respuestas...");
                            gestor.finalizarExamen();
                        } catch (IOException ioEx) {
                            Mensajes.mostrarError("Error al enviar la resolución.");
                        }
                    }
                }
            } catch (Exception ex) {
                tmrTemporizador.stop();
            }
        }

        private boolean isCaducado() {
            return blnCaducado;
        }
        
        private void agregarTiempo(int intMinutosAgregados) {
            this.minutos += intMinutosAgregados;
        }

        private void quitarTiempo(int intMinutosQuitados) {
            this.minutos -= intMinutosQuitados;
        }
        
        private void pararReloj() {
            this.tmrTemporizador.stop();
        }
    }

    private void desabilitarSeguridad() {
        GestorSeguridad gestorSeguridad = new GestorSeguridad();
        gestorSeguridad.habilitarTaskManager();
        gestorSeguridad.habilitarExplorer();
    }

}
